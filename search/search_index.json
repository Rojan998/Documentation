{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#this-is-where-i-post-contents-that-i-have-learned","title":"This is where I post contents that I have learned!","text":"<p>Here, I publish all the documentation stuffs learned during my devops journey. Most of the contents are from the github: </p> <p>DevOps Documents Repository</p>"},{"location":"ansible/","title":"Ansible Setup in Amazon Linux VMs","text":""},{"location":"ansible/#step-0-create-3-amazon-linux-vms-in-aws-free-tier-eligible-t2micro","title":"Step-0: Create 3 Amazon Linux VMs in AWS (Free Tier Eligible - t2.micro)","text":"<p>1 - Control Node  2 - Managed Nodes / host Nodes</p> <p>Note: Connect to all 3 VMs using MobaXterm</p>"},{"location":"ansible/#step-1-setup-user-and-configure-user-in-sudoers-file-and-update-sshd-config-file-execute-below-commands-in-all-3-vms","title":"Step-1: Setup User and Configure user in sudoers file and update SSHD Config File. Execute below commands in all 3 VMs","text":""},{"location":"ansible/#a-create-user","title":"a) Create user","text":"<pre><code>sudo useradd ansible\nsudo passwd ansible\n</code></pre>"},{"location":"ansible/#b-configure-user-in-sudoers-file","title":"b) Configure user in sudoers file","text":"<p>sudo visudo</p> <pre><code>ansible ALL=(ALL) NOPASSWD: ALL\n</code></pre>"},{"location":"ansible/#c-update-sshd-config-file","title":"c) Update sshd config file","text":"<pre><code>sudo vi /etc/ssh/sshd_config\n</code></pre> <p>-&gt; comment PasswordAuthentication no -&gt; PermitEmptyPasswords yes</p>"},{"location":"ansible/#d-restart-the-server","title":"d) Restart the server","text":"<pre><code>sudo service sshd restart\n</code></pre> <p>Note: Do the above steps in all the 3 machines</p>"},{"location":"ansible/#step-2-install-ansible-in-control-node","title":"Step-2: Install Ansible in Control Node","text":""},{"location":"ansible/#a-switch-to-ansible-user","title":"a) Switch to Ansible user","text":"<pre><code>sudo su ansible\ncd ~\n</code></pre>"},{"location":"ansible/#b-install-python","title":"b) Install Python","text":"<pre><code>  sudo yum install python3 -y\n</code></pre>"},{"location":"ansible/#c-check-python-version","title":"c) Check python version","text":"<pre><code>python3 --version\n</code></pre>"},{"location":"ansible/#d-install-pip-it-is-a-python-package-manager","title":"d) Install PIP (It is a python package manager)","text":"<pre><code>sudo yum -y install python3-pip\n</code></pre>"},{"location":"ansible/#e-install-ansible-using-python-pip","title":"e) Install Ansible using Python PIP","text":"<pre><code>pip3 install ansible --user\n</code></pre>"},{"location":"ansible/#f-verify-ansible-version","title":"f) Verify ansible version","text":"<pre><code>ansible --version\n</code></pre>"},{"location":"ansible/#g-create-ansible-folder-under-etc","title":"g) Create ansible folder under /etc","text":"<pre><code>sudo mkdir /etc/ansible\n</code></pre>"},{"location":"ansible/#step-3-generate-ssh-key-in-control-node-and-copy-ssh-key-into-managed-nodes","title":"Step-3: Generate SSH Key In Control Node and Copy SSH key into Managed Nodes","text":""},{"location":"ansible/#a-switch-to-ansible-user_1","title":"a) Switch to ansible user","text":"<pre><code>sudo su ansible\n</code></pre>"},{"location":"ansible/#generate-ssh-key-using-below-command","title":"Generate ssh key using below command","text":"<pre><code>ssh-keygen\n</code></pre>"},{"location":"ansible/#b-copy-it-to-managed-nodes-as-ansible-user","title":"b) Copy it to Managed Nodes as ansible user","text":"<pre><code>ssh-copy-id ansible@&lt;ManagedNode-Private-IP&gt;\n</code></pre> <p>Ex : $ ssh-copy-id ansible@172.31.44.90</p> <p>Note: Repeat above command by updating HOST IP for all the managed Servers.</p>"},{"location":"ansible/#step-4-update-host-inventory-in-ansible-server-to-add-managed-node-servers-details","title":"Step-4: Update Host Inventory in Ansible Server to add managed node servers details","text":"<pre><code>sudo vi /etc/ansible/hosts\n</code></pre> <p>[webservers]  172.31.47.247  [dbservers]  172.31.44.90</p>"},{"location":"ansible/#step-5-test-connectivity","title":"Step-5: Test Connectivity","text":"<pre><code>ansible all -m ping\n</code></pre>"},{"location":"bash/","title":"Bash Guide: From Beginner to Advanced","text":""},{"location":"bash/#1-introduction-to-bash","title":"1. Introduction to Bash","text":"<p>Bash (Bourne Again Shell) is a Unix shell and command language. It is widely used for scripting and automating tasks in Linux and macOS environments.</p>"},{"location":"bash/#2-setting-up-bash","title":"2. Setting Up Bash","text":""},{"location":"bash/#on-linux","title":"On Linux","text":"<p>Bash is pre-installed on most Linux distributions. Open a terminal to start using it.</p>"},{"location":"bash/#on-macos","title":"On macOS","text":"<p>Bash is pre-installed. Open the Terminal app to use it.</p>"},{"location":"bash/#on-windows","title":"On Windows","text":"<ol> <li>Install Git for Windows to get Git Bash.</li> <li>Alternatively, enable the Windows Subsystem for Linux (WSL) and install a Linux distribution.</li> </ol>"},{"location":"bash/#3-basic-bash-commands","title":"3. Basic Bash Commands","text":""},{"location":"bash/#navigating-the-filesystem","title":"Navigating the Filesystem","text":"<ul> <li><code>pwd</code> - Print the current working directory.</li> <li><code>ls</code> - List files and directories.</li> <li><code>cd</code> - Change directory.</li> </ul>"},{"location":"bash/#file-operations","title":"File Operations","text":"<ul> <li><code>touch</code> - Create an empty file.</li> <li><code>cp</code> - Copy files or directories.</li> <li><code>mv</code> - Move or rename files or directories.</li> <li><code>rm</code> - Remove files or directories.</li> </ul>"},{"location":"bash/#viewing-file-contents","title":"Viewing File Contents","text":"<ul> <li><code>cat</code> - Concatenate and display file contents.</li> <li><code>less</code> - View file contents one screen at a time.</li> <li><code>head</code> - Display the first few lines of a file.</li> <li><code>tail</code> - Display the last few lines of a file.</li> </ul>"},{"location":"bash/#4-working-with-files-and-directories","title":"4. Working with Files and Directories","text":"<ul> <li>Wildcards: <code>*</code>, <code>?</code>, <code>[abc]</code></li> <li>Permissions: <code>chmod</code>, <code>chown</code></li> <li>Archiving and Compression: <code>tar</code>, <code>gzip</code>, <code>zip</code></li> </ul>"},{"location":"bash/#5-bash-scripting-basics","title":"5. Bash Scripting Basics","text":""},{"location":"bash/#creating-a-script","title":"Creating a Script","text":"<ol> <li>Create a file with a <code>.sh</code> extension.</li> <li>Add the shebang: <code>#!/bin/bash</code></li> <li>Write your commands.</li> </ol>"},{"location":"bash/#running-a-script","title":"Running a Script","text":"<ul> <li>Make it executable: <code>chmod +x script.sh</code></li> <li>Run it: <code>./script.sh</code></li> </ul>"},{"location":"bash/#6-control-structures-in-bash","title":"6. Control Structures in Bash","text":""},{"location":"bash/#conditional-statements","title":"Conditional Statements","text":"<ul> <li><code>if</code>, <code>else</code>, <code>elif</code></li> <li>Example:   <code>bash   if [ condition ]; then       echo \"Condition is true\"   else       echo \"Condition is false\"   fi</code></li> </ul>"},{"location":"bash/#loops","title":"Loops","text":"<ul> <li><code>for</code>, <code>while</code>, <code>until</code></li> <li>Example:   <code>bash   for i in {1..5}; do       echo \"Number $i\"   done</code></li> </ul>"},{"location":"bash/#7-working-with-variables","title":"7. Working with Variables","text":""},{"location":"bash/#defining-variables","title":"Defining Variables","text":"<ul> <li>Syntax: <code>variable_name=\"value\"</code></li> <li>Access: <code>$variable_name</code></li> <li>Example:   <code>bash   name=\"John\"   echo \"Hello, $name\"</code></li> </ul>"},{"location":"bash/#special-variables","title":"Special Variables","text":"<ul> <li><code>$0</code> - The name of the script.</li> <li><code>$1, $2, ...</code> - Positional parameters.</li> <li><code>$@</code> - All arguments.</li> <li><code>$#</code> - Number of arguments.</li> <li><code>$?</code> - Exit status of the last command.</li> </ul>"},{"location":"bash/#8-functions-in-bash","title":"8. Functions in Bash","text":""},{"location":"bash/#defining-a-function","title":"Defining a Function","text":"<pre><code>function_name() {\n    commands\n}\n</code></pre>"},{"location":"bash/#calling-a-function","title":"Calling a Function","text":"<pre><code>function_name\n</code></pre>"},{"location":"bash/#example","title":"Example","text":"<pre><code>greet() {\n    echo \"Hello, $1\"\n}\ngreet \"World\"\n</code></pre>"},{"location":"bash/#9-advanced-bash-scripting","title":"9. Advanced Bash Scripting","text":""},{"location":"bash/#arrays","title":"Arrays","text":"<ul> <li>Define: <code>array=(value1 value2 value3)</code></li> <li>Access: <code>${array[index]}</code></li> <li>Example:   <code>bash   fruits=(\"apple\" \"banana\" \"cherry\")   echo ${fruits[1]}  # Outputs: banana</code></li> </ul>"},{"location":"bash/#regular-expressions","title":"Regular Expressions","text":"<ul> <li>Use <code>[[ ... ]]</code> for pattern matching.</li> <li>Example:   <code>bash   if [[ \"abc123\" =~ [0-9]+ ]]; then       echo \"Contains numbers\"   fi</code></li> </ul>"},{"location":"bash/#command-substitution","title":"Command Substitution","text":"<ul> <li>Syntax: <code>$(command)</code></li> <li>Example:   <code>bash   current_date=$(date)   echo \"Today is $current_date\"</code></li> </ul>"},{"location":"bash/#process-management","title":"Process Management","text":"<ul> <li>Run in background: <code>command &amp;</code></li> <li>List jobs: <code>jobs</code></li> <li>Bring to foreground: <code>fg</code></li> <li>Send to background: <code>bg</code></li> </ul>"},{"location":"bash/#inputoutput-redirection","title":"Input/Output Redirection","text":"<ul> <li><code>&gt;</code> - Redirect output to a file.</li> <li><code>&gt;&gt;</code> - Append output to a file.</li> <li><code>&lt;</code> - Redirect input from a file.</li> <li><code>|</code> - Pipe output to another command.</li> </ul>"},{"location":"bash/#10-debugging-bash-scripts","title":"10. Debugging Bash Scripts","text":""},{"location":"bash/#debugging-options","title":"Debugging Options","text":"<ul> <li><code>set -x</code> - Enable debugging (prints each command before execution).</li> <li><code>set -e</code> - Exit immediately if a command fails.</li> </ul>"},{"location":"bash/#example_1","title":"Example","text":"<pre><code>#!/bin/bash\nset -x\necho \"Debugging this script\"\n</code></pre>"},{"location":"bash/#using-echo-for-debugging","title":"Using <code>echo</code> for Debugging","text":"<ul> <li>Print variable values or messages to trace script execution.</li> </ul>"},{"location":"bash/#11-best-practices","title":"11. Best Practices","text":"<ul> <li>Use Comments: Add comments to explain your code.   <code>bash   # This is a comment   echo \"Hello, World\"</code></li> <li>Use Meaningful Variable Names: Avoid single-letter variables.</li> <li>Handle Errors Gracefully: Check for errors using <code>$?</code> or <code>if</code> conditions.</li> <li>Test in a Safe Environment: Avoid running scripts with destructive commands on production systems.</li> <li>Use ShellCheck: Analyze your scripts for potential issues.</li> </ul>"},{"location":"bash/#12-resources-and-further-reading","title":"12. Resources and Further Reading","text":"<ul> <li>GNU Bash Manual</li> <li>Bash Scripting Guide</li> <li>ShellCheck - A tool for analyzing shell scripts.</li> <li>Bash Cheat Sheet</li> </ul>"},{"location":"devops/","title":"DevOps Project Setup with CI CD Pipeline","text":"<ol> <li>Git Hub</li> <li>Maven</li> <li>SonarQube</li> <li>Nexus Repo</li> <li>Tomcat</li> <li>Jenkins</li> </ol>"},{"location":"devops/#step-0-create-jenkins-pipeline-scripted","title":"Step-0 : Create Jenkins Pipeline (Scripted)","text":"<pre><code>node {\n\n}\n</code></pre>"},{"location":"devops/#step-1-add-github-stage-to-clone-git-repository","title":"Step-1 : Add github stage to clone git repository","text":"<ol> <li>Use Pipeline Syntax and Generate Script for Git Clone with Repo Details</li> </ol> <pre><code>  git credentialsId: 'GIT-Credentials', url: 'https://github.com/ashokitschool/maven-web-app.git'\n</code></pre> <ol> <li>Add Generated Script in Pipeline as a stage</li> </ol> <pre><code> stage('clone repo') {\n  git credentialsId: 'GIT-Credentials', url: 'https://github.com/ashokitschool/maven-web-app.git'\n}\n</code></pre>"},{"location":"devops/#step-2-create-maven-build-stage-add-maven-in-global-tools","title":"Step-2 : Create Maven Build Stage (Add maven in global tools)","text":"<ol> <li> <p>Configure Maven as Global Tool in Manage Jenkins</p> </li> <li> <p>Add Maven Build Stage in Pipeline</p> </li> </ol> <pre><code> stage ('Maven Build') {\n       def mavenHome = tool name: \"Maven-3.9.4\", type: \"maven\"\n       def mavenCMD = \"${mavenHome}/bin/mvn\"\n       sh \"${mavenCMD} clean package\"\n }\n</code></pre>"},{"location":"devops/#step-3-add-sonarqube-stage","title":"Step-3 : Add SonarQube stage","text":"<ol> <li>Start Sonar Server </li> <li>Login into Sonar Server &amp; Generate Sonar Token     Ex: cedbc0b89e45c58f4a86e4687f2df2a2241e3369 </li> <li> <p>Add Sonar Token in 'Jenkins Credentials' as Secret Text     -&gt; Manager Jenkins     -&gt; Credentials     -&gt; Add Credentials     -&gt; Select Secret text     -&gt; Enter Sonar Token as secret text </p> </li> <li> <p>Install SonarQube Scanner Plugin     -&gt; Manage Jenkins -&gt; Plugins -&gt; Available -&gt; Sonar Qube Scanner Plugin -&gt; Install it</p> </li> <li> <p>Configure SonarQube Server     -&gt; Manage Jenkins -&gt; Configure System -&gt; Sonar Qube Servers -&gt; Add Sonar Qube Server - Name : Sonar-Server-7.8 - Server URL : http://52.66.247.11:9000/ (Give your sonar server url here) - Add Sonar Server Token</p> </li> <li> <p>Add SonarQube Stage in Jenkins Pipeline</p> </li> </ol> <pre><code>stage('SonarQube analysis') {\n    withSonarQubeEnv('Sonar-Server-7.8') {\n    def mavenHome = tool name: \"Maven-3.8.6\", type: \"maven\"\n    def mavenCMD = \"${mavenHome}/bin/mvn\"\n    sh \"${mavenCMD} sonar:sonar\"\n    }\n}\n</code></pre>"},{"location":"devops/#step-4-create-nexus-stage","title":"Step-4 : Create Nexus Stage","text":"<ol> <li>Run nexus VM and create nexus repository</li> <li>Create Nexus Repository</li> <li>Install Nexus Repository Plugin using Manage Plugins ( Plugin Name : Nexus Artifact Uploader)</li> <li>Generate Nexus Pipeline Syntax</li> </ol> <pre><code>stage ('Nexus Upload'){\nnexusArtifactUploader artifacts: [[artifactId: '01-Maven-Web-App', classifier: '', file: 'target/01-maven-web-app.war', type: 'war']], credentialsId: 'Nexus-Credentials', groupId: 'in.ashokit', nexusUrl: '13.127.185.241:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'ashokit-snapshot-repository', version: '1.0-SNAPSHOT'\n}\n</code></pre>"},{"location":"devops/#step-5-create-deploy-stage","title":"Step-5 : Create Deploy Stage","text":"<ol> <li>Start Tomcat Server </li> <li>Install SSH Agent plugin using Manage Plugins </li> <li>Generate SSH Agent and configure stage </li> <li>Add Tomcat Server as 'Uname with Secret Text' </li> </ol> <pre><code>stage ('Deploy'){\nsshagent(['Tomcat-Server-Agent']) {\nsh 'scp -o StrictHostKeyChecking=no target/01-maven-web-app.war ec2-user@15.207.100.83:/home/ec2-user/apache-tomcat-9.0.80/webapps'\n  }\n}\n</code></pre>"},{"location":"docker-compose/","title":"Docker compose setup","text":"<pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n</code></pre>"},{"location":"docker/","title":"Overview","text":""},{"location":"docker/#setup-linux-vm-amazon-linux-ubuntu","title":"Setup Linux VM (Amazon Linux / Ubuntu)","text":"<ol> <li>Login into AWS Cloud account</li> <li>Create Linux VM and connect to it using MobaXterm</li> </ol>"},{"location":"docker/#install-docker-in-amazon-linux-vm","title":"Install Docker In Amazon Linux VM","text":"<pre><code>sudo yum update -y\nsudo yum install docker -y\nsudo service docker start\nsudo usermod -aG docker ec2-user\nexit\n</code></pre>"},{"location":"docker/#install-docker-in-ubuntu-vm","title":"Install Docker In Ubuntu VM","text":"<pre><code>sudo apt update\ncurl -fsSL get.docker.com | /bin/bash\nsudo usermod -aG docker ubuntu\nexit\n</code></pre>"},{"location":"docker/#verify-docker-installation","title":"Verify docker installation","text":"<pre><code>docker -v\n</code></pre>"},{"location":"eks/","title":"Step - 1 : Create EKS Management Host in AWS","text":"<ol> <li>Launch new Ubuntu VM using AWS Ec2 ( t2.micro )</li> <li>Connect to machine and install kubectl using below commands</li> </ol> <pre><code>curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin\nkubectl version --short --client\n</code></pre> <ol> <li>Install AWS CLI latest version using below commands</li> </ol> <pre><code>sudo apt install unzip\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws --version\n</code></pre> <ol> <li>Install eksctl using below commands</li> </ol> <pre><code>curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\nsudo mv /tmp/eksctl /usr/local/bin\neksctl version\n</code></pre>"},{"location":"eks/#step-2-create-iam-role-attach-to-eks-management-host","title":"Step - 2 : Create IAM role &amp; attach to EKS Management Host","text":"<ol> <li>Create New Role using IAM service ( Select Usecase - ec2 )</li> <li>Add below permissions for the role </li> <li>Administrator - acces </li> <li>Enter Role Name (eksroleec2)</li> <li>Attach created role to EKS Management Host (Select EC2 =&gt; Click on Security =&gt; Modify IAM Role =&gt; attach IAM role we have created)</li> </ol>"},{"location":"eks/#step-3-create-eks-cluster-using-eksctl","title":"Step - 3 : Create EKS Cluster using eksctl","text":"<p>Syntax:</p> <p>eksctl create cluster --name cluster-name \\ --region region-name \\ --node-type instance-type \\ --nodes-min 2 \\ --nodes-max 2 \\ --zones ,"},{"location":"eks/#n-virgina","title":"N. Virgina:","text":"<p><code>eksctl create cluster --name ashokit-cluster4 --region us-east-1 --node-type t2.medium  --zones us-east-1a,us-east-1b</code></p>"},{"location":"eks/#mumbai","title":"Mumbai:","text":"<p><code>eksctl create cluster --name ashokit-cluster4 --region ap-south-1 --node-type t2.medium  --zones ap-south-1a,ap-south-1b</code></p>"},{"location":"eks/#note-cluster-creation-will-take-5-to-10-mins-of-time-we-have-to-wait-after-cluster-created-we-can-check-nodes-using-below-command","title":"Note: Cluster creation will take 5 to 10 mins of time (we have to wait). After cluster created we can check nodes using below command.","text":"<p><code>kubectl get nodes</code></p>"},{"location":"eks/#note-we-should-be-able-to-see-eks-cluster-nodes-here","title":"Note: We should be able to see EKS cluster nodes here.**","text":""},{"location":"eks/#we-are-done-with-our-setup","title":"We are done with our Setup","text":""},{"location":"eks/#step-4-after-your-practise-delete-cluster-and-other-resources-we-have-used-in-aws-cloud-to-avoid-billing","title":"Step - 4 : After your practise, delete Cluster and other resources we have used in AWS Cloud to avoid billing","text":"<pre><code>eksctl delete cluster --name ashokit-cluster4 --region ap-south-1\n</code></pre>"},{"location":"elk-stack/","title":"ELK Stack","text":""},{"location":"elk-stack/#video-httpsyoutuben2hhavpn6jo","title":"Video : https://youtu.be/n2HHAvpn6Jo","text":"<p>ELK is the combination of 3 open source products</p> <ol> <li>Elastic Search : It is used to store and process logs</li> <li>Logstash : It is used to collect application logs and store in Elastic Search</li> <li>Kibana : It will provide user interface to monitor application logs</li> </ol>"},{"location":"elk-stack/#elk-setup","title":"ELK Setup","text":"<ol> <li> <p>Download ELK Softwares</p> <ul> <li>Elastic Search : https://www.elastic.co/downloads/elasticsearch</li> <li>Kibana : https://www.elastic.co/downloads/kibana</li> <li>Logstash : https://www.elastic.co/downloads/logstash</li> </ul> </li> <li> <p>Extract all zip files</p> </li> <li> <p>Run elasticsearch using elasticsearch.bat file (make sure all security settings disable in elasticsearch.yml before running)</p> <pre><code>$ elasticsearch.bat\n</code></pre> </li> <li> <p>Check Elastic Search Running or not (URL : http://localhost:9200/ )</p> </li> <li> <p>Run kibana using kibana.bat file (before running kibana, enable elasticsearch url in kibana.yml file)</p> <pre><code>$ kibana.bat\n</code></pre> </li> <li> <p>Check Kibana running or not ( URL : http://localhost:5601/app/home )</p> </li> <li> <p>Run Spring Boot Application and generate log file with log messages</p> </li> <li> <p>create logstash.conf file like below</p> </li> </ol> <pre><code>input {\n  file {\n    path =&gt; \"C:/Users/ashok/classes/22-JRTP/workspace/SpringBoot_REST_API/app.log\"\n    start_position =&gt; \"beginning\"\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"http://localhost:9200\"]\n  }\n}\n</code></pre> <ol> <li>Run logstash server using below command</li> </ol> <p><code>logstash -f logstash-sample.conf</code></p> <ol> <li> <p>Check logstash server is running or not ( http://localhost:9600 )</p> </li> <li> <p>Check application logs in Kibana dashboard</p> </li> </ol>"},{"location":"git/","title":"Git","text":""},{"location":"git/#1-setup-and-configuration","title":"1. Setup and Configuration","text":""},{"location":"git/#git-init","title":"git init","text":"<p>Initializes a new Git repository in your project folder.</p> <pre><code>\ngit init\n\n</code></pre>"},{"location":"git/#git-config","title":"git config","text":"<p>Sets configuration values like username, email, etc.</p> <pre><code>\n# Set global username\ngit config --global user.name \"Your Name\"\n\n# Set global email\ngit config --global user.email \"your.email@example.com\"\n\n# View all configuration\ngit config --list\n\n</code></pre>"},{"location":"git/#2-working-with-repositories","title":"2. Working with Repositories","text":""},{"location":"git/#git-clone","title":"git clone","text":"<p>Clones a remote repository to your local machine.</p> <pre><code>\ngit clone https://github.com/username/repository.git\n\n</code></pre>"},{"location":"git/#git-remote","title":"git remote","text":"<p>Manages remote repository references.</p> <pre><code>\n# View all remotes\ngit remote -v\n\n# Add a new remote repository\ngit remote add origin https://github.com/username/repository.git\n\n# Remove a remote\ngit remote remove origin\n\n</code></pre>"},{"location":"git/#3-basic-git-workflow","title":"3. Basic Git Workflow","text":""},{"location":"git/#git-status","title":"git status","text":"<p>Shows the current state of the working directory and staging area.</p> <pre><code>\ngit status\n\n</code></pre>"},{"location":"git/#git-add","title":"git add","text":"<p>Stages changes (adds them to the staging area) for the next commit.</p> <pre><code>\n# Add a specific file to staging\ngit add file_name.txt\n\n# Add all changed files\ngit add .\n\n</code></pre>"},{"location":"git/#git-commit","title":"git commit","text":"<p>Commits the staged changes with a message.</p> <pre><code>\n# Commit staged changes with a message\ngit commit -m \"Commit message here\"\n\n</code></pre>"},{"location":"git/#git-log","title":"git log","text":"<p>Displays the commit history.</p> <pre><code># View all commits\ngit log\n\n# View a simplified one-line log\ngit log --oneline\n\n</code></pre>"},{"location":"git/#git-push","title":"git push","text":"<p>Pushes the committed changes to the remote repository.</p> <pre><code>\n# Push to the default remote (origin) and branch\ngit push origin main\n\n</code></pre>"},{"location":"git/#git-pull","title":"git pull","text":"<p>Fetches and integrates changes from the remote repository to your local branch.</p> <pre><code>\ngit pull origin main\n\n</code></pre>"},{"location":"git/#4-branching-and-merging","title":"4. Branching and Merging","text":""},{"location":"git/#git-branch","title":"git branch","text":"<p>Manages branches in the repository.</p> <pre><code>\n# List all branches\ngit branch\n\n# Create a new branch\ngit branch new_feature\n\n# Switch to a branch\ngit checkout new_feature\n\n# Create and switch to a new branch\ngit checkout -b new_feature\n\n</code></pre>"},{"location":"git/#git-merge","title":"git merge","text":"<p>Merges one branch into the current branch.</p> <pre><code># Merge the 'new_feature' branch into the current branch\ngit merge new_feature\n\n</code></pre>"},{"location":"git/#git-checkout","title":"git checkout","text":"<p>Switches branches or restores files.</p> <pre><code>\n# Switch to an existing branch\ngit checkout main\n\n# Restore a file to its last committed state\ngit checkout -- file_name.txt\n\n</code></pre>"},{"location":"git/#git-rebase","title":"git rebase","text":"<p>Reapplies commits on top of another base branch (linear history).</p> <pre><code>\n# Rebase your feature branch onto the main branch\ngit checkout new_feature\ngit rebase main\n\n</code></pre>"},{"location":"git/#5-undoing-changes","title":"5. Undoing Changes","text":""},{"location":"git/#git-reset","title":"git reset","text":"<p>Resets your working directory to a previous commit or state.</p> <pre><code>\n# Unstage changes but keep the changes in your working directory\ngit reset HEAD file_name.txt\n\n# Reset to a previous commit (hard reset will lose changes)\ngit reset --hard commit_hash\n\n</code></pre>"},{"location":"git/#git-revert","title":"git revert","text":"<p>Creates a new commit that reverses the changes from a previous commit.</p> <pre><code>\n# Revert a specific commit\ngit revert commit_hash\n\n</code></pre>"},{"location":"git/#6-stashing-changes","title":"6. Stashing Changes","text":""},{"location":"git/#git-stash","title":"git stash","text":"<p>Temporarily saves your work without committing.</p> <pre><code>\n# Save your current changes\ngit stash\n\n# View stash list\ngit stash list\n\n# Apply the most recent stash\ngit stash apply\n\n# Drop (delete) the most recent stash\ngit stash drop\n\n# Apply and drop stash in one command\ngit stash pop\n\n</code></pre>"},{"location":"git/#7-collaboration-and-sharing","title":"7. Collaboration and Sharing","text":""},{"location":"git/#git-fetch","title":"git fetch","text":"<p>Downloads commits, files, and refs from a remote repository.</p> <pre><code>\n# Fetch from the origin (but don't merge)\ngit fetch origin\n\n</code></pre>"},{"location":"git/#git-push_1","title":"git push","text":"<p>Uploads your changes to a remote repository.</p> <pre><code>\n# Push to the remote repository 'origin' on branch 'main'\ngit push origin main\n\n</code></pre>"},{"location":"git/#git-pull_1","title":"git pull","text":"<p>Fetches from the remote repository and merges the changes into the current branch.</p> <pre><code>\ngit pull origin main\n\n</code></pre>"},{"location":"git/#git-remote_1","title":"git remote","text":"<p>Manages remote repository connections.</p> <pre><code>\n# Add a remote repository\ngit remote add origin https://github.com/username/repo.git\n\n# Remove a remote repository\ngit remote remove origin\n\n</code></pre>"},{"location":"git/#9-git-logs-and-diff","title":"9. Git Logs and Diff","text":""},{"location":"git/#git-log_1","title":"git log","text":"<p>Displays commit logs.</p> <pre><code>\n# View commit history\ngit log\n\n# View a simplified commit log\ngit log --oneline\n\n</code></pre>"},{"location":"git/#git-diff","title":"git diff","text":"<p>Shows differences between commits, branches, or the working directory.</p> <pre><code>\n# Show changes between working directory and staging area\ngit diff\n\n# Show changes between commits\ngit diff commit1 commit2\n\n# Show changes between branches\ngit diff branch1 branch2\n\n</code></pre>"},{"location":"git/#10-cleaning-up","title":"10. Cleaning Up","text":""},{"location":"git/#git-clean","title":"git clean","text":"<p>Removes untracked files from the working directory.</p> <pre><code>\n# Remove untracked files (dry run)\ngit clean -n\n\n# Remove untracked files (actual removal)\ngit clean -f\n\n</code></pre>"},{"location":"git/#11-advanced-commands","title":"11. Advanced Commands","text":""},{"location":"git/#git-cherry-pick","title":"git cherry-pick","text":"<p>Apply the changes from one or more existing commits onto the current branch.</p> <pre><code># Cherry-pick a commit\ngit cherry-pick commit_hash\n\n</code></pre>"},{"location":"git/#git-rebase_1","title":"git rebase","text":"<p>Reapply commits on top of another base branch.</p> <pre><code>\n# Rebase your current branch onto another branch\ngit rebase main\n\n</code></pre>"},{"location":"git/#common-workflows","title":"Common Workflows","text":""},{"location":"git/#creating-a-new-repository","title":"Creating a new repository","text":"<ol> <li>Initialize a repository locally:</li> </ol> <pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\n\n</code></pre> <ol> <li>Link the remote repository and push:</li> </ol> <pre><code>git remote add origin https://github.com/username/repo.git\ngit push -u origin main\n\n</code></pre>"},{"location":"git/#forking-a-repository-and-making-changes","title":"Forking a repository and making changes","text":"<ol> <li>Fork a repository from GitHub.</li> <li>Clone your fork:</li> </ol> <pre><code>git clone https://github.com/your-username/repository.git\n\n</code></pre> <ol> <li>Make changes, commit, and push:</li> </ol> <pre><code>git add .\ngit commit -m \"Made some changes\"\ngit push origin main\n\n</code></pre>"},{"location":"jenkins-buildtools/","title":"Build tools installation and Setup on Jenkins","text":"<p>Here's a detailed process for installing Git, Maven, Gradle, and npm on a Jenkins server:</p>"},{"location":"jenkins-buildtools/#1-installing-git","title":"1. Installing Git:","text":"<ul> <li>Jenkins typically comes with Git integration out of the box. However, if Git is not installed on your Jenkins server, you can install it using the package manager of your operating system.</li> <li>For Ubuntu:     <code>bash     sudo apt update     sudo apt install git</code></li> <li>For CentOS/RHEL:     <code>bash     sudo yum install git</code></li> </ul>"},{"location":"jenkins-buildtools/#2-installing-maven","title":"2. Installing Maven:","text":"<ul> <li>You can install Maven on your Jenkins server by downloading and extracting the Maven binary distribution.</li> </ul> <p>```bash   # Go to the /opt directory   cd /opt</p> <p># Download Maven   sudo wget https://apache.mirror.digitalpacific.com.au/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz</p> <p># Extract the downloaded file   sudo tar -xf apache-maven-3.8.4-bin.tar.gz</p> <p># Rename the extracted directory   sudo mv apache-maven-3.8.4 maven</p> <p># Add Maven bin directory to PATH   echo 'export PATH=$PATH:/opt/maven/bin' | sudo tee -a /etc/profile.d/maven.sh</p> <p># Reload the shell configuration   source /etc/profile.d/maven.sh   ```</p>"},{"location":"jenkins-buildtools/#3-installing-gradle","title":"3. Installing Gradle:","text":"<ul> <li>Similarly, you can install Gradle by downloading and extracting the Gradle binary distribution.</li> </ul> <p>```bash   # Go to the /opt directory   cd /opt</p> <p># Download Gradle   sudo wget https://services.gradle.org/distributions/gradle-7.4-bin.zip</p> <p># Extract the downloaded file   sudo unzip gradle-7.4-bin.zip</p> <p># Rename the extracted directory   sudo mv gradle-7.4 gradle</p> <p># Add Gradle bin directory to PATH   echo 'export PATH=$PATH:/opt/gradle/bin' | sudo tee -a /etc/profile.d/gradle.sh</p> <p># Reload the shell configuration   source /etc/profile.d/gradle.sh   ```</p>"},{"location":"jenkins-buildtools/#4-installing-npm","title":"4. Installing npm:","text":"<ul> <li>To install npm, you'll first need to install Node.js on your Jenkins server, as npm comes bundled with Node.js.</li> <li>For Ubuntu:     <code>bash     sudo apt update     sudo apt install nodejs npm</code></li> <li>For CentOS/RHEL:     <code>bash     sudo yum install epel-release     sudo yum install nodejs npm</code></li> </ul> <p>Once you've completed these steps, Git, Maven, Gradle, and npm should be installed and available on your Jenkins server. You can verify the installations by running commands like <code>git --version</code>, <code>mvn --version</code>, <code>gradle --version</code>, and <code>npm --version</code> to ensure that the tools are properly installed and configured.</p>"},{"location":"jenkins-docker-k8s/","title":"Project Setup using below tools","text":"<ol> <li>Maven</li> <li>Git Hub</li> <li>Jenkins</li> <li>Docker</li> <li>Kubernetes</li> </ol>"},{"location":"jenkins-docker-k8s/#step-1-create-eks-management-host-in-aws","title":"Step - 1 : Create EKS Management Host in AWS","text":"<ol> <li>Launch new Ubuntu VM using AWS Ec2 ( t2.micro )</li> <li>Connect to machine and install kubectl using below commands</li> </ol> <pre><code>curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin\nkubectl version --short --client\n</code></pre> <ol> <li>Install AWS CLI latest version using below commands</li> </ol> <pre><code>sudo apt install unzip\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws --version\n</code></pre> <ol> <li>Install eksctl using below commands</li> </ol> <pre><code>curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\nsudo mv /tmp/eksctl /usr/local/bin\neksctl version\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-2-create-iam-role-attach-to-eks-management-host-jenkins-server","title":"Step - 2 : Create IAM role &amp; attach to EKS Management Host &amp; Jenkins Server","text":"<ol> <li>Create New Role using IAM service ( Select Usecase - ec2 )</li> <li>Add below permissions for the role </li> <li>IAM - fullaccess </li> <li>VPC - fullaccess </li> <li>EC2 - fullaccess </li> <li>CloudFomration - fullaccess </li> <li>Administrator - acces </li> <li>Enter Role Name (eksroleec2)</li> <li>Attach created role to EKS Management Host (Select EC2 =&gt; Click on Security =&gt; Modify IAM Role =&gt; attach IAM role we have created)</li> <li>Attach created role to Jenkins Machine (Select EC2 =&gt; Click on Security =&gt; Modify IAM Role =&gt; attach IAM role we have created)</li> </ol>"},{"location":"jenkins-docker-k8s/#step-3-create-eks-cluster-using-eksctl","title":"Step - 3 : Create EKS Cluster using eksctl","text":"<p>Syntax:</p> <p>eksctl create cluster --name cluster-name \\ --region region-name \\ --node-type instance-type \\ --nodes-min 2 \\ --nodes-max 2 \\ --zones , <pre><code>eksctl create cluster --name ashokit-cluster --region ap-south-1 --node-type t2.medium  --zones ap-south-1a,ap-south-1b\n</code></pre> <p>Note: Cluster creation will take 5 to 10 mins of time (we have to wait). After cluster created we can check nodes using below command.</p> <pre><code>kubectl get nodes\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-4-jenkins-server-setup-in-linux-vm","title":"Step-4 : Jenkins Server Setup in Linux VM","text":"<ol> <li>Create Ubuntu VM using AWS EC2 (t2.medium) </li> <li>Enable 8080 Port Number in Security Group Inbound Rules</li> <li>Connect to VM using MobaXterm</li> <li>Instal Java</li> </ol> <pre><code>sudo apt update\nsudo apt install fontconfig openjdk-17-jre\njava -version\n</code></pre> <ol> <li>Install Jenkins</li> </ol> <pre><code>sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \\\n  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\n  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\n  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install jenkins\n</code></pre> <ol> <li>Start Jenkins</li> </ol> <pre><code>sudo systemctl enable jenkins\nsudo systemctl start jenkins\n</code></pre> <ol> <li>Verify Jenkins</li> </ol> <pre><code>sudo systemctl status jenkins\n</code></pre> <ol> <li>Open jenkins server in browser using VM public ip</li> </ol> <pre><code>http://public-ip:8080/\n</code></pre> <ol> <li>Copy jenkins admin pwd</li> </ol> <pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre> <ol> <li>Create Admin Account &amp; Install Required Plugins in Jenkins</li> </ol>"},{"location":"jenkins-docker-k8s/#step-5-configure-maven-as-global-tool-in-jenkins","title":"Step-5 : Configure Maven as Global Tool in Jenkins","text":"<ol> <li>Manage Jenkins -&gt; Tools -&gt; Maven Installation -&gt; Add maven </li> </ol>"},{"location":"jenkins-docker-k8s/#step-6-setup-docker-in-jenkins","title":"Step-6 : Setup Docker in Jenkins","text":"<pre><code>curl -fsSL get.docker.com | /bin/bash\nsudo usermod -aG docker jenkins\nsudo systemctl restart jenkins\nsudo docker version\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-8-install-aws-cli-in-jenkins-server","title":"Step - 8 : Install AWS CLI in JENKINS Server","text":"<p>URL : https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html</p> <p>Execute below commands to install AWS CLI</p> <pre><code>sudo apt install unzip\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws --version\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-9-install-kubectl-in-jenkins-server","title":"Step - 9 : Install Kubectl in JENKINS Server","text":"<p>Execute below commands in Jenkins server to install kubectl</p> <pre><code>curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin\nkubectl version --short --client\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-10-update-eks-cluster-config-file-in-jenkins-server","title":"Step - 10 : Update EKS Cluster Config File in Jenkins Server","text":"<ol> <li> <p>Execute below command in Eks Management host &amp; copy kube config file data     $ cat .kube/config</p> </li> <li> <p>Execute below commands in Jenkins Server and paste kube config file     $ cd /var/lib/jenkins     $ sudo mkdir .kube     $ sudo vi .kube/config </p> </li> <li> <p>Execute below commands in Jenkins Server and paste kube config file for ubuntu user to check EKS Cluster info    $ cd ~     $ ls -la     $ sudo vi .kube/config </p> </li> <li> <p>check eks nodes     $ kubectl get nodes</p> </li> </ol> <p>Note: We should be able to see EKS cluster nodes here.</p>"},{"location":"jenkins-docker-k8s/#step-11-create-jenkins-ci-cd-job","title":"Step - 11 : Create Jenkins CI CD Job","text":"<ul> <li>Stage-1 : Clone Git Repo </li> <li>Stage-2 : Maven Build </li> <li>Stage-3 : Create Docker Image </li> <li>Stage-4 : Push Docker Image to Registry </li> <li>Stage-5 : Deploy app in k8s eks cluster </li> </ul> <pre><code>pipeline {\n    agent any\n\n    tools{\n        maven \"Maven-3.9.9\"\n    }\n\n    stages {\n        stage('Clone Repo') {\n            steps {\n                git 'https://github.com/ashokitschool/maven-web-app.git'\n            }\n        }\n        stage('Maven Build') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n        stage('Docker Image') {\n            steps {\n                sh 'docker build -t ashokit/mavenwebapp .'\n            }\n        }\n        stage('k8s deployment') {\n            steps {\n                sh 'kubectl apply -f k8s-deploy.yml'\n            }\n        }\n    }\n}\n\n</code></pre>"},{"location":"jenkins-docker-k8s/#step-12-access-application-in-browser","title":"Step - 12 : Access Application in Browser","text":"<ul> <li>We should be able to access our application    URL : http://LBR/context-path/</li> </ul>"},{"location":"jenkins-docker-k8s/#we-are-done-with-our-setup","title":"We are done with our Setup","text":""},{"location":"jenkins-docker-k8s/#step-13-after-your-practise-delete-cluster-and-other-resources-we-have-used-in-aws-cloud-to-avoid-billing","title":"Step - 13: After your practise, delete Cluster and other resources we have used in AWS Cloud to avoid billing","text":""},{"location":"jenkins-docker/","title":"Project Setup using below tools","text":"<ol> <li>Maven</li> <li>Git Hub</li> <li>Jenkins</li> <li>Docker</li> </ol>"},{"location":"jenkins-docker/#step-1-jenkins-server-setup-in-linux-vm","title":"Step-1 : Jenkins Server Setup in Linux VM","text":"<ol> <li>Create Ubuntu VM using AWS EC2 (t2.medium) </li> <li>Enable 8080 Port Number in Security Group Inbound Rules</li> <li>Connect to VM using MobaXterm</li> <li>Install Java</li> </ol> <pre><code>sudo apt update\nsudo apt install fontconfig openjdk-17-jre\njava -version\n</code></pre> <ol> <li>Install Jenkins</li> </ol> <pre><code>sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \\\n  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\n  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\n  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install jenkins\n</code></pre> <ol> <li>Start Jenkins</li> </ol> <pre><code>sudo systemctl enable jenkins\nsudo systemctl start jenkins\n</code></pre> <ol> <li>Verify Jenkins</li> </ol> <pre><code>sudo systemctl status jenkins\n</code></pre> <ol> <li>Access jenkins server in browser using VM public ip</li> </ol> <pre><code>http://public-ip:8080/\n\n</code></pre> <ol> <li>Copy jenkins admin pwd</li> </ol> <pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre> <ol> <li>Create Admin Account &amp; Install Required Plugins in Jenkins</li> </ol>"},{"location":"jenkins-docker/#step-2-configure-maven-as-global-tool-in-jenkins","title":"Step-2 : Configure Maven as Global Tool in Jenkins","text":"<ol> <li>Manage Jenkins -&gt; Tools -&gt; Maven Installation -&gt; Add maven </li> </ol>"},{"location":"jenkins-docker/#step-3-setup-docker-in-jenkins","title":"Step-3 : Setup Docker in Jenkins","text":"<pre><code>curl -fsSL get.docker.com | /bin/bash\nsudo usermod -aG docker jenkins\nsudo usermod -aG docker ubuntu\nsudo systemctl restart jenkins\nsudo docker version\n</code></pre>"},{"location":"jenkins-docker/#step-4-create-jenkins-job","title":"Step - 4 : Create Jenkins Job","text":"<ul> <li>Stage-1 : Clone Git Repo </li> <li>Stage-2 : Maven Build </li> <li>Stage-3 : Create Docker Image </li> <li>Stage-4 : Create Docker Container </li> </ul>"},{"location":"jenkins-docker/#step-5-trigger-jenkins-job","title":"Step - 5 : Trigger Jenkins Job","text":""},{"location":"jenkins-docker/#step-6-enable-host-port-in-security-group-inbound-rules","title":"Step - 6 : Enable host port in security group inbound rules","text":""},{"location":"jenkins-docker/#step-7-access-application-in-browser","title":"Step - 7 : Access Application in Browser","text":"<ul> <li>We should be able to access our application </li> </ul> <p>URL : http://public-ip:port/</p>"},{"location":"jenkins-docker/#we-are-done-with-our-setup","title":"We are done with our Setup","text":""},{"location":"jenkins-docker/#step-8-after-your-practise-delete-resources-we-have-used-in-aws-cloud-to-avoid-billing","title":"Step - 8 : After your practise, delete resources we have used in AWS Cloud to avoid billing","text":""},{"location":"jenkins-master-slave/","title":"Install Jenkins on Ubuntu &amp; Setup Jenkins Master-Slave configuration","text":"<p>To install Jenkins on Ubuntu and set up a master-slave configuration, you can follow these steps. Jenkins is a popular open-source automation server, and this guide will help you create a Jenkins master and connect one or more Jenkins slave nodes to distribute workloads.</p>"},{"location":"jenkins-master-slave/#installing-jenkins-on-ubuntu","title":"Installing Jenkins on Ubuntu:","text":""},{"location":"jenkins-master-slave/#1-update-package-index","title":"1. Update Package Index:","text":"<pre><code>sudo apt update\n</code></pre>"},{"location":"jenkins-master-slave/#2-install-java-development-kit-jdk","title":"2. Install Java Development Kit (JDK):","text":"<p>Jenkins requires Java to run. You can install OpenJDK using the following command:</p> <pre><code>sudo apt install openjdk-8-jdk\n</code></pre>"},{"location":"jenkins-master-slave/#3-add-jenkins-repository-key","title":"3. Add Jenkins Repository Key:","text":"<pre><code>wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\n</code></pre>"},{"location":"jenkins-master-slave/#4-add-jenkins-repository-to-your-system","title":"4. Add Jenkins Repository to Your System:","text":"<pre><code>sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'\n</code></pre>"},{"location":"jenkins-master-slave/#5-update-package-index-again","title":"5. Update Package Index Again:","text":"<pre><code>sudo apt update\n</code></pre>"},{"location":"jenkins-master-slave/#6-install-jenkins","title":"6. Install Jenkins:","text":"<pre><code>sudo apt install jenkins\n</code></pre>"},{"location":"jenkins-master-slave/#7-start-jenkins-service","title":"7. Start Jenkins Service:","text":"<pre><code>sudo systemctl start jenkins\n</code></pre>"},{"location":"jenkins-master-slave/#8-enable-jenkins-to-start-on-boot","title":"8. Enable Jenkins to Start on Boot:","text":"<pre><code>sudo systemctl enable jenkins\n</code></pre>"},{"location":"jenkins-master-slave/#9-check-jenkins-service-status","title":"9. Check Jenkins Service Status:","text":"<pre><code>sudo systemctl status jenkins\n</code></pre> <p>If Jenkins is running properly, you should see an active status.</p>"},{"location":"jenkins-master-slave/#10-configure-firewall-if-necessary","title":"10. Configure Firewall (if necessary):","text":"<pre><code>If you have UFW (Uncomplicated Firewall) enabled, you need to allow traffic on port 8080 (Jenkins default port).\n```\nsudo ufw allow 8080\n```\n</code></pre>"},{"location":"jenkins-master-slave/#setting-up-jenkins-master-slave-configuration","title":"Setting Up Jenkins Master-Slave Configuration:","text":""},{"location":"jenkins-master-slave/#configure-jenkins-master","title":"Configure Jenkins Master:","text":"<ol> <li>Access Jenkins Web Interface:</li> </ol> <p>Open your web browser and navigate to <code>http://your_server_ip_or_domain:8080</code>. You will be prompted to enter the initial administrator password.</p> <ol> <li>Unlock Jenkins:</li> </ol> <p>To retrieve the initial password, you can use the following command:</p> <pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre> <ol> <li> <p>Install Recommended Plugins:    Choose \"Install suggested plugins\" to install the recommended plugins.</p> </li> <li> <p>Create Admin User:    Follow the instructions to create an administrator user for Jenkins.</p> </li> <li> <p>Set Jenkins URL:    After setting up the admin user, you'll be asked to set the Jenkins URL. Ensure it's correctly set based on your server's configuration.</p> </li> <li> <p>Finish Installation:    Once the setup is complete, you'll be redirected to the Jenkins dashboard.</p> </li> </ol>"},{"location":"jenkins-master-slave/#configure-jenkins-slave","title":"Configure Jenkins Slave:","text":"<ol> <li> <p>Install Java Development Kit (JDK) on Slave Machine:    Follow the same steps as mentioned above to install Java on your slave machine.</p> </li> <li> <p>Enable SSH Access from Master to Slave:    Ensure that the master server can SSH into the slave without requiring a password. You might need to generate SSH keys and copy them to the slave.</p> </li> <li> <p>Add Slave Node in Jenkins:</p> </li> <li> <p>Go to Jenkins dashboard -&gt; Manage Jenkins -&gt; Manage Nodes and Clouds -&gt; New Node.</p> </li> <li>Enter a name for your node and select \"Permanent Agent\".</li> <li>Configure the remote root directory, labels, and other settings as per your requirement.</li> <li>Under \"Launch method\", choose \"Launch agent via SSH\".</li> <li> <p>Enter the slave machine's SSH details (hostname, username, and private key).</p> </li> <li> <p>Save Configuration:    Save the configuration, and Jenkins will attempt to connect to the slave machine.</p> </li> <li> <p>Verify Connection:    After saving, Jenkins will attempt to connect to the slave machine. If the connection is successful, the node will appear in the list of nodes.</p> </li> <li> <p>Set Up Labels and Usage:    You can set labels on your slave nodes and configure Jenkins jobs to run on specific nodes based on these labels.</p> </li> <li> <p>Testing:    Create a Jenkins job and configure it to run on the slave node. Run the job to verify that the setup is working correctly.</p> </li> </ol> <p>That's it! You now have Jenkins installed on Ubuntu and a Master-Slave configuration set up.</p>"},{"location":"jenkins/","title":"Jenkins Server Setup in Linux VM","text":""},{"location":"jenkins/#step-1-create-linux-vm","title":"Step- 1 : Create Linux VM","text":"<ol> <li>Create Ubuntu VM using AWS EC2 (t2.medium) </li> <li>Enable 8080 Port Number in Security Group Inbound Rules</li> <li>Connect to VM using MobaXterm</li> </ol>"},{"location":"jenkins/#step-2-install-java","title":"Step- 2 : Install Java","text":"<pre><code>sudo apt update\nsudo apt install fontconfig openjdk-17-jre\njava -version\n</code></pre>"},{"location":"jenkins/#step-3-install-jenkins","title":"Step- 3 : Install Jenkins","text":"<pre><code>sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \\\n  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\n  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\n  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install jenkins\n</code></pre>"},{"location":"jenkins/#step-4-start-jenkins","title":"Step- 4 : Start Jenkins","text":"<pre><code>sudo systemctl enable jenkins\nsudo systemctl start jenkins\n</code></pre>"},{"location":"jenkins/#step-5-verify-jenkins","title":"Step- 5 : Verify Jenkins","text":"<pre><code>sudo systemctl status jenkins\n</code></pre>"},{"location":"jenkins/#step-6-open-jenkins-server-in-browser-using-vm-public-ip","title":"Step- 6 : Open jenkins server in browser using VM public ip","text":"<pre><code>http://public-ip:8080/\n</code></pre>"},{"location":"jenkins/#step-7-copy-jenkins-admin-pwd","title":"Step- 7 : Copy jenkins admin pwd","text":"<pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre>"},{"location":"jenkins/#step-8-create-admin-account-install-required-plugins-in-jenkins","title":"Step- 8 : Create Admin Account &amp; Install Required Plugins in Jenkins","text":""},{"location":"linux/","title":"Linux Commands","text":"<p>This document provides a comprehensive list of commonly used Linux commands for file management, system monitoring, networking, and more. Each command is accompanied by examples to help you understand its usage.</p>"},{"location":"linux/#1-file-and-directory-management","title":"1. File and Directory Management","text":""},{"location":"linux/#ls-list-directory-contents","title":"ls \u2013 List directory contents","text":"<pre><code>ls          # List files in the current directory\nls -l       # Long format listing (includes file permissions, size, date)\nls -a       # Show hidden files (files starting with a dot)\n</code></pre>"},{"location":"linux/#cd-change-directory","title":"cd \u2013 Change directory","text":"<pre><code>cd /path/to/directory   # Change to a specific directory\ncd ..                   # Move one directory up (parent directory)\ncd ~                    # Move to the home directory\n</code></pre>"},{"location":"linux/#pwd-print-working-directory","title":"pwd \u2013 Print working directory","text":"<pre><code>pwd        # Show the full path of the current directory\n</code></pre>"},{"location":"linux/#mkdir-create-a-directory","title":"mkdir \u2013 Create a directory","text":"<pre><code>mkdir new_directory       # Create a new directory\nmkdir -p dir1/dir2/dir3   # Create nested directories\n</code></pre>"},{"location":"linux/#rm-remove-files-or-directories","title":"rm \u2013 Remove files or directories","text":"<pre><code>rm file.txt             # Remove a file\nrm -r directory_name    # Remove a directory and its contents\nrm -f file.txt          # Force delete (without confirmation)\n</code></pre>"},{"location":"linux/#cp-copy-files-or-directories","title":"cp \u2013 Copy files or directories","text":"<pre><code>cp source.txt destination.txt        # Copy a file\ncp -r source_dir/ destination_dir/   # Copy a directory\n</code></pre>"},{"location":"linux/#mv-move-or-rename-files-and-directories","title":"mv \u2013 Move or rename files and directories","text":"<pre><code>mv file.txt new_location/          # Move a file to another location\nmv old_name.txt new_name.txt       # Rename a file\n</code></pre>"},{"location":"linux/#touch-create-an-empty-file","title":"touch \u2013 Create an empty file","text":"<pre><code>touch new_file.txt      # Create a new empty file\n</code></pre>"},{"location":"linux/#2-file-permissions-and-ownership","title":"2. File Permissions and Ownership","text":""},{"location":"linux/#chmod-change-file-permissions","title":"chmod \u2013 Change file permissions","text":"<pre><code>chmod 755 file.txt       # Set read, write, execute permissions for the owner; read, execute for others\nchmod +x script.sh       # Add execute permission to a script\n</code></pre>"},{"location":"linux/#chown-change-file-ownership","title":"chown \u2013 Change file ownership","text":"<pre><code>chown user:group file.txt   # Change ownership of a file\nchown -R user:group dir/    # Change ownership of a directory recursively\n</code></pre>"},{"location":"linux/#3-viewing-and-editing-files","title":"3. Viewing and Editing Files","text":""},{"location":"linux/#cat-concatenate-and-display-file-contents","title":"cat \u2013 Concatenate and display file contents","text":"<pre><code>cat file.txt              # Display the contents of a file\n</code></pre>"},{"location":"linux/#less-view-file-contents-page-by-page","title":"less \u2013 View file contents page by page","text":"<pre><code>less file.txt             # View file contents with scrolling\n</code></pre>"},{"location":"linux/#tail-view-the-last-lines-of-a-file-useful-for-logs","title":"tail \u2013 View the last lines of a file (useful for logs)","text":"<pre><code>tail -n 10 log.txt        # Show the last 10 lines of a file\ntail -f log.txt           # Follow the live changes of a log file\n</code></pre>"},{"location":"linux/#head-view-the-first-lines-of-a-file","title":"head \u2013 View the first lines of a file","text":"<pre><code>head -n 10 file.txt       # Show the first 10 lines of a file\n</code></pre>"},{"location":"linux/#nano-simple-text-editor","title":"nano \u2013 Simple text editor","text":"<pre><code>nano file.txt             # Open a file for editing using nano\n</code></pre>"},{"location":"linux/#vim-advanced-text-editor","title":"vim \u2013 Advanced text editor","text":"<pre><code>vim file.txt              # Open a file for editing using vim\n</code></pre>"},{"location":"linux/#4-disk-usage-and-system-information","title":"4. Disk Usage and System Information","text":""},{"location":"linux/#df-check-disk-space-usage","title":"df \u2013 Check disk space usage","text":"<pre><code>df -h                    # Show disk usage in human-readable format (GB, MB)\n</code></pre>"},{"location":"linux/#du-estimate-file-space-usage","title":"du \u2013 Estimate file space usage","text":"<pre><code>du -sh directory_name/    # Show the size of a directory\n</code></pre>"},{"location":"linux/#free-check-memory-usage","title":"free \u2013 Check memory usage","text":"<pre><code>free -h                  # Show free and used memory (RAM) in human-readable format\n</code></pre>"},{"location":"linux/#top-htop-monitor-system-processes","title":"top / htop \u2013 Monitor system processes","text":"<pre><code>top                      # Display real-time process information and system resources\nhtop                     # An enhanced version of top (if installed)\n</code></pre>"},{"location":"linux/#uname-show-system-information","title":"uname \u2013 Show system information","text":"<pre><code>uname -a                 # Show all system information (kernel version, architecture, etc.)\n</code></pre>"},{"location":"linux/#lscpu-display-cpu-architecture-information","title":"lscpu \u2013 Display CPU architecture information","text":"<pre><code>lscpu                    # View detailed CPU info (number of cores, architecture)\n</code></pre>"},{"location":"linux/#uptime-show-system-uptime-and-load-average","title":"uptime \u2013 Show system uptime and load average","text":"<pre><code>uptime                   # Show how long the system has been running\n</code></pre>"},{"location":"linux/#iostat-display-cpu-and-io-statistics","title":"iostat \u2013 Display CPU and I/O statistics","text":"<pre><code>iostat                   # Shows statistics related to CPU and input/output performance\n</code></pre>"},{"location":"linux/#5-networking","title":"5. Networking","text":""},{"location":"linux/#ifconfig-network-interface-configuration","title":"ifconfig \u2013 Network interface configuration","text":"<pre><code>ifconfig                 # Show network interface information (IP addresses, etc.)\n</code></pre>"},{"location":"linux/#ip-more-modern-tool-to-manage-ip-configurations","title":"ip \u2013 More modern tool to manage IP configurations","text":"<pre><code>ip addr show             # Show IP addresses and network interfaces\nip link set eth0 up      # Bring up an interface\nip link set eth0 down    # Bring down an interface\n</code></pre>"},{"location":"linux/#ping-check-network-connectivity","title":"ping \u2013 Check network connectivity","text":"<pre><code>ping google.com          # Ping an external domain to test network connectivity\n</code></pre>"},{"location":"linux/#curl-transfer-data-to-or-from-a-server","title":"curl \u2013 Transfer data to or from a server","text":"<pre><code>curl https://example.com   # Fetch content from a URL\n</code></pre>"},{"location":"linux/#wget-download-files-from-the-web","title":"wget \u2013 Download files from the web","text":"<pre><code>wget https://example.com/file.zip   # Download a file from the internet\n</code></pre>"},{"location":"linux/#netstat-network-statistics-and-active-connections","title":"netstat \u2013 Network statistics and active connections","text":"<pre><code>netstat -tuln            # Show all listening ports and services\n</code></pre>"},{"location":"linux/#ss-another-command-for-network-statistics-faster-than-netstat","title":"ss \u2013 Another command for network statistics (faster than netstat)","text":"<pre><code>ss -tuln                 # List open network ports and services\n</code></pre>"},{"location":"linux/#traceroute-trace-the-path-packets-take-to-a-network-host","title":"traceroute \u2013 Trace the path packets take to a network host","text":"<pre><code>traceroute google.com    # Trace the route packets take to reach google.com\n</code></pre>"},{"location":"linux/#6-process-management","title":"6. Process Management","text":""},{"location":"linux/#ps-display-information-about-running-processes","title":"ps \u2013 Display information about running processes","text":"<pre><code>ps aux                    # Show all running processes\n</code></pre>"},{"location":"linux/#kill-terminate-a-process-by-its-pid","title":"kill \u2013 Terminate a process by its PID","text":"<pre><code>kill 1234                 # Terminate process with PID 1234\n</code></pre>"},{"location":"linux/#killall-kill-processes-by-name","title":"killall \u2013 Kill processes by name","text":"<pre><code>killall nginx             # Kill all processes named 'nginx'\n</code></pre>"},{"location":"linux/#pkill-kill-processes-based-on-name-or-attributes","title":"pkill \u2013 Kill processes based on name or attributes","text":"<pre><code>pkill -f script.sh        # Kill a process running the script.sh\n</code></pre>"},{"location":"linux/#bg-and-fg-control-backgroundforeground-jobs","title":"bg and fg \u2013 Control background/foreground jobs","text":"<pre><code>bg                       # Resume a job in the background\nfg                       # Bring a job to the foreground\n</code></pre>"},{"location":"linux/#nohup-run-a-process-that-continues-after-logging-out","title":"nohup \u2013 Run a process that continues after logging out","text":"<pre><code>nohup ./script.sh &amp;       # Run a script in the background, even after logout\n</code></pre>"},{"location":"linux/#7-user-and-group-management","title":"7. User and Group Management","text":""},{"location":"linux/#adduser-add-a-new-user","title":"adduser \u2013 Add a new user","text":"<pre><code>adduser newuser           # Create a new user\n</code></pre>"},{"location":"linux/#usermod-modify-user-accounts","title":"usermod \u2013 Modify user accounts","text":"<pre><code>usermod -aG sudo username   # Add a user to the sudo group (admin privileges)\n</code></pre>"},{"location":"linux/#passwd-change-a-user-password","title":"passwd \u2013 Change a user password","text":"<pre><code>passwd newuser           # Change the password for the specified user\n</code></pre>"},{"location":"linux/#su-switch-user","title":"su \u2013 Switch user","text":"<pre><code>su - username            # Switch to another user\n</code></pre>"},{"location":"linux/#sudo-execute-commands-as-another-user-usually-root","title":"sudo \u2013 Execute commands as another user (usually root)","text":"<pre><code>sudo command             # Run a command as superuser (root)\n</code></pre>"},{"location":"linux/#8-package-management-based-on-the-os","title":"8. Package Management (based on the OS)","text":""},{"location":"linux/#apt-package-manager-for-debianubuntu-based-systems","title":"apt \u2013 Package manager for Debian/Ubuntu-based systems","text":"<pre><code>sudo apt update          # Update the package list\nsudo apt upgrade         # Upgrade installed packages\nsudo apt install nginx   # Install a new package (nginx)\nsudo apt remove nginx    # Remove a package\n</code></pre>"},{"location":"linux/#yum-package-manager-for-rhelcentos-based-systems","title":"yum \u2013 Package manager for RHEL/CentOS-based systems","text":"<pre><code>sudo yum update          # Update all packages\nsudo yum install nginx   # Install a package (nginx)\nsudo yum remove nginx    # Remove a package\n</code></pre>"},{"location":"linux/#9-compression-and-archiving","title":"9. Compression and Archiving","text":""},{"location":"linux/#tar-archive-files","title":"tar \u2013 Archive files","text":"<pre><code>tar -cvf archive.tar file1 file2   # Create an archive\ntar -xvf archive.tar               # Extract an archive\ntar -czvf archive.tar.gz dir/      # Create a compressed archive (.tar.gz)\ntar -xzvf archive.tar.gz\n\n### **zip/unzip** \u2013 Create or extract ZIP archives\n\n```bash\nzip archive.zip file1 file2       # Create a ZIP file\nunzip archive.zip                 # Extract a ZIP file\n\n</code></pre>"},{"location":"linux/#10-ssh-and-file-transfers","title":"10. SSH and File Transfers","text":""},{"location":"linux/#ssh-securely-log-into-a-remote-machine","title":"ssh \u2013 Securely log into a remote machine","text":"<pre><code>ssh user@remote_host             # Connect to a remote machine via SSH\nssh -i /path/to/key user@remote   # Connect using an SSH key\n\n</code></pre>"},{"location":"linux/#scp-securely-copy-files-tofrom-a-remote-machine","title":"scp \u2013 Securely copy files to/from a remote machine","text":"<pre><code>scp file.txt user@remote:/path/   # Copy a file to a remote machine\nscp user@remote:/path/file.txt .  # Copy a file from a remote machine to local\n\n</code></pre>"},{"location":"linux/#11-miscellaneous-useful-commands","title":"11. Miscellaneous Useful Commands","text":""},{"location":"linux/#history-view-command-history","title":"history \u2013 View command history","text":"<pre><code>history                           # List all previously executed commands\n\n</code></pre>"},{"location":"linux/#alias-create-shortcuts-for-commands","title":"alias \u2013 Create shortcuts for commands","text":"<pre><code>alias ll='ls -l'                  # Create a shortcut for a long command\nunalias ll                        # Remove an alias\n\n</code></pre>"},{"location":"linux/#whoami-show-current-user","title":"whoami \u2013 Show current user","text":"<pre><code>whoami                            # Display the current logged-in username\n\n</code></pre>"},{"location":"linux/#date-display-the-current-date-and-time","title":"date \u2013 Display the current date and time","text":"<pre><code>date                              # Show the current date and time\n\n</code></pre>"},{"location":"linux/#shutdown-shutdown-or-restart-the-system","title":"shutdown \u2013 Shutdown or restart the system","text":"<pre><code>sudo shutdown now # Shutdown immediately\nsudo reboot # Reboot the system\n</code></pre>"},{"location":"maven/","title":"Maven","text":""},{"location":"maven/#1-introduction-to-maven","title":"1. Introduction to Maven","text":"<ul> <li>What is Maven?</li> <li>Maven is an open-source build automation tool primarily for Java projects, but it can manage other languages.</li> <li>It automates the build process, dependency management, project documentation, and reporting.</li> <li>Why Maven in DevOps?</li> <li>Standardizes the build process across teams.</li> <li>Integrates easily into CI/CD pipelines, facilitating automated builds and testing.</li> <li>Manages dependencies and project versions, ensuring consistency across environments.</li> </ul>"},{"location":"maven/#2-key-maven-concepts","title":"2. Key Maven Concepts","text":"<ol> <li> <p>POM (Project Object Model)</p> </li> <li> <p><code>pom.xml</code> is Maven\u2019s configuration file, where project dependencies, plugins, and goals are defined.</p> </li> <li>Each project has a single <code>pom.xml</code> file, defining:<ul> <li>Project coordinates (groupId, artifactId, version).</li> <li>Dependencies.</li> <li>Plugins and build configurations.</li> </ul> </li> <li> <p>Basic Structure:</p> <p>```xml</p> <p> 4.0.0 com.example my-app 1.0 </p> <p>```</p> </li> <li> <p>Dependency Management</p> </li> <li> <p>Maven downloads dependencies automatically from repositories.</p> </li> <li>Dependencies are defined in the <code>dependencies</code> section of <code>pom.xml</code>.</li> <li> <p>Example:</p> <p>```xml</p> <p> junit junit 4.13.2 test com.github.docker-java docker-java 3.4.0 </p> <p>```</p> </li> <li> <p>Repositories</p> </li> <li>Local Repository: Stored on your local machine (default is <code>~/.m2/repository</code>).</li> <li>Central Repository: Maven\u2019s default repository on the web (https://repo.maven.apache.org/maven2).</li> <li>Remote Repository: Custom repositories defined in <code>pom.xml</code> or <code>settings.xml</code> (e.g., internal corporate repository).</li> </ol>"},{"location":"maven/#3-maven-build-lifecycle-and-phases","title":"3. Maven Build Lifecycle and Phases","text":"<ol> <li>Build Lifecycle</li> <li>The default build lifecycle includes three main stages: clean, default (or build), and site.</li> <li>Key Phases:<ul> <li><code>validate</code>: Validates if all project information is correct.</li> <li><code>compile</code>: Compiles the source code.</li> <li><code>test</code>: Runs unit tests.</li> <li><code>package</code>: Packages compiled code into JAR/WAR files.</li> <li><code>verify</code>: Verifies the integrity of the project and checks for errors.</li> <li><code>install</code>: Installs the package into the local repository.</li> <li><code>deploy</code>: Deploys the project to a remote repository.</li> </ul> </li> <li>Common Commands</li> <li><code>mvn clean</code>: Cleans the <code>target</code> directory by deleting all files generated by previous builds.</li> <li><code>mvn compile</code>: Compiles the source code of the project.</li> <li><code>mvn test</code>: Runs tests using the JUnit testing framework.</li> <li><code>mvn package</code>: Builds the project and packages it into a JAR/WAR file.</li> <li><code>mvn install</code>: Installs the package into the local repository.</li> <li><code>mvn deploy</code>: Deploys the package to the configured remote repository.</li> </ol>"},{"location":"maven/#4-working-with-plugins","title":"4. Working with Plugins","text":"<ol> <li>What are Maven Plugins?</li> <li>Plugins enhance Maven\u2019s capabilities by adding additional goals.</li> <li>Common plugins:<ul> <li>maven-compiler-plugin: Manages compilation settings.</li> <li>maven-surefire-plugin: Manages testing configurations.</li> <li>maven-jar-plugin: Configures JAR file creation.</li> </ul> </li> <li>Plugin Example:</li> </ol> <p>```xml</p> <p> org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 </p> <p>```</p>"},{"location":"maven/#5-maven-profiles","title":"5. Maven Profiles","text":"<ul> <li>Purpose of Profiles:</li> <li>Maven profiles allow custom build configurations for different environments (e.g., development, testing, production).</li> <li>Profile Example:</li> </ul> <p>```xml</p> <p> dev development prod production </p> <p>```</p> <ul> <li>Command to Activate Profile:</li> </ul> <p>```bash</p> <p>mvn clean install -Pdev</p> <p>```</p>"},{"location":"maven/#6-dependency-scopes","title":"6. Dependency Scopes","text":"<ul> <li>Scopes control the classpath for dependencies and when they are available:</li> <li>compile: Default scope, available everywhere.</li> <li>test: Only for testing; not included in the final package.</li> <li>provided: Available at compile and test time but assumed to be provided at runtime by the runtime environment.</li> <li>runtime: Available at runtime but not during compilation.</li> </ul>"},{"location":"maven/#7-using-maven-in-cicd-pipelines","title":"7. Using Maven in CI/CD Pipelines","text":"<ol> <li>Jenkins Integration</li> <li>Jenkins can automate Maven commands within a CI/CD pipeline.</li> <li>Maven is often configured as a build step in Jenkins, executing commands like <code>mvn clean install</code>.</li> <li> <p>Docker with Maven</p> </li> <li> <p>Maven can be used within Docker for consistent builds across environments.</p> </li> <li> <p>Dockerfile Example:</p> <p>```</p> <p>FROM maven:3.8.4-jdk-11  WORKDIR /app  COPY . .  RUN mvn clean package  ```</p> </li> </ol>"},{"location":"maven/#8-best-practices-for-using-maven-in-devops","title":"8. Best Practices for Using Maven in DevOps","text":"<ol> <li>Use a Dependency Management Tool: Rely on <code>pom.xml</code> for dependency management to prevent conflicts.</li> <li>Consistent Plugin Versions: Define specific plugin versions to avoid version conflicts.</li> <li>Use Profiles for Environment Configuration: Use profiles to configure settings specific to different environments.</li> <li>Automate Tests and Deployments: Integrate Maven with CI/CD pipelines to automate builds and tests.</li> </ol>"},{"location":"maven/#9-troubleshooting-common-maven-issues","title":"9. Troubleshooting Common Maven Issues","text":"<ol> <li>Dependency Conflicts</li> <li>Check for conflicting versions using <code>mvn dependency:tree</code>.</li> <li>Use dependency exclusions if necessary.</li> <li>Build Failures</li> <li>Review error messages for the exact cause (e.g., missing dependencies, version conflicts).</li> <li>Use the <code>X</code> flag for detailed debugging information.</li> <li>Repository Access Issues</li> <li>Verify access to the central or remote repository.</li> <li>Configure proxy settings in <code>settings.xml</code> if behind a corporate firewall.</li> </ol>"},{"location":"maven/#10-commands-reference-table","title":"10. Commands Reference Table","text":"Command Description <code>mvn clean</code> Cleans the project by deleting <code>target</code> directory <code>mvn compile</code> Compiles the project source code <code>mvn test</code> Runs tests <code>mvn package</code> Packages the compiled code into JAR/WAR <code>mvn install</code> Installs the package into the local repository <code>mvn deploy</code> Deploys the package to a remote repository <code>mvn dependency:tree</code> Displays the dependency tree <code>mvn -P&lt;profile&gt;</code> Runs Maven with a specific profile <code>mvn help:effective-pom</code> Displays the effective POM with resolved inheritance and profiles"},{"location":"maven/#step-1-download-the-jdk-binaries","title":"Step 1: Download the JDK Binaries","text":"<pre><code>wget https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz\ntar -xvf openjdk-13.0.1_linux-x64_bin.tar.gz\nsudo mv jdk-13.0.1 /opt/\n\n</code></pre>"},{"location":"maven/#step-2-setting-java_home-and-path-environment-variables","title":"Step 2: Setting JAVA_HOME and Path Environment Variables","text":"<pre><code>JAVA_HOME='/opt/jdk-13.0.1'\nPATH=\"$JAVA_HOME/bin:$PATH\"\nexport PATH\n\n</code></pre> <p>You can relaunch the terminal or execute\u00a0<code>source .profile</code>\u00a0command to apply the configuration changes.</p>"},{"location":"maven/#step-3-verify-the-java-installation","title":"Step 3: Verify the Java Installation","text":"<p>You can run\u00a0<code>java -version</code>\u00a0command to verify the JDK installation.</p> <pre><code>$ java -version\nopenjdk version \"13.0.1\" 2019-10-15\nOpenJDK Runtime Environment (build 13.0.1+9)\nOpenJDK 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)\n</code></pre>"},{"location":"maven/#installing-maven-on-linuxubuntu","title":"Installing Maven on Linux/Ubuntu","text":"<p>Go to the URL:\u00a0https://maven.apache.org/download.cgi\u00a0Copy the link for the \u201cBinary tar.gz archive\u201d file. Then run the following commands to download and untar it.</p>"},{"location":"maven/#step-1-download-the-maven-binaries","title":"Step 1: Download the Maven Binaries","text":"<pre><code>wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz --no-check-certificate\ntar -xvf apache-maven-3.9.9-bin.tar.gz\nsudo mv apache-maven-3.9.9 /opt/\n\n</code></pre>"},{"location":"maven/#step-2-setting-m2_home-and-path-variables","title":"Step 2: Setting M2_HOME and Path Variables","text":"<p>Add the following lines to the user profile file (.profile).</p> <pre><code>M2_HOME='/opt/apache-maven-3.9.9'\nPATH=\"$M2_HOME/bin:$PATH\"\nexport PATH\n\n</code></pre> <p>Relaunch the terminal or execute\u00a0<code>source .profile</code>\u00a0to apply the changes.</p>"},{"location":"maven/#step-3-verify-the-maven-installation","title":"Step 3: Verify the Maven installation","text":"<p>Execute\u00a0<code>mvn -version</code>\u00a0command and it should produce the following output.</p> <pre><code>$ mvn -version\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\nMaven home: /opt/apache-maven-3.6.3\nJava version: 13.0.1, vendor: Oracle Corporation, runtime: /opt/jdk-13.0.1\nDefault locale: en, platform encoding: UTF-8\nOS name: \"linux\", version: \"4.15.0-47-generic\", arch: \"amd64\", family: \"unix\"\n$\n</code></pre> <p>To Create a Project:</p> <pre><code>mvn archetype:generate -DgroupId=com.example -DartifactId=MyApp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre>"},{"location":"minikube/","title":"MiniKube","text":""},{"location":"minikube/#step-1-setup-linux-vm","title":"Step-1 : Setup Linux VM","text":"<ol> <li>Login into AWS Cloud account</li> <li>Create Linux VM with Ubuntu AMI (t2.medium or t3.medium)</li> <li>Select Storage as 50 GB (Default is 8 GB only for Linux)</li> <li>Create Linux VM and connect to it using SSH Client</li> </ol>"},{"location":"minikube/#step-2-install-docker-in-ubuntu-vm","title":"Step-2 : Install Docker In Ubuntu VM","text":"<pre><code>sudo apt update\ncurl -fsSL get.docker.com | /bin/bash\nsudo usermod -aG docker ubuntu\nexit\n</code></pre>"},{"location":"minikube/#step-3-updating-system-packages-and-installing-minikube-dependencies","title":"Step-3 : Updating system packages and installing Minikube dependencies","text":"<pre><code>sudo apt update\nsudo apt install -y curl wget apt-transport-https\n\n</code></pre>"},{"location":"minikube/#step-4-installing-minikube","title":"Step-4 : Installing Minikube","text":"<pre><code>curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\nminikube version\n</code></pre>"},{"location":"minikube/#step-5-install-kubectl-kubernetes-client","title":"Step-5 : Install Kubectl (Kubernetes Client)","text":"<pre><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\nkubectl version -o yaml\n</code></pre>"},{"location":"minikube/#step-6-start-minikube-server","title":"Step-6 : Start MiniKube Server","text":"<pre><code>minikube start \u2014 driver=docker\n</code></pre>"},{"location":"minikube/#step-7-check-minikube-status","title":"Step-7 : Check MiniKube status","text":"<pre><code>minikube status\n</code></pre>"},{"location":"minikube/#step-8-access-k8s-cluster","title":"Step-8 : Access K8S Cluster","text":"<pre><code>kubectl cluster-info\n</code></pre>"},{"location":"minikube/#step-9-access-k8s-nodes","title":"Step-9 : Access K8S Nodes","text":"<pre><code>kubectl get nodes\n</code></pre>"},{"location":"mysql/","title":"Setup MySql DB Server on AWS EC2 Instance (Ubuntu)","text":""},{"location":"mysql/#step-0-create-aws-ec2-vm-using-ubuntu-ami-connect-to-it-using-mobaxterm","title":"Step-0: Create AWS EC2 VM using Ubuntu AMI &amp; Connect to it using MobaXterm","text":""},{"location":"mysql/#step-1-update-the-system","title":"Step-1: Update the system","text":"<pre><code>sudo apt update\n</code></pre>"},{"location":"mysql/#step-2-install-mysql","title":"Step-2: Install MySql","text":"<pre><code>sudo apt install mysql-server\n</code></pre>"},{"location":"mysql/#step-3-check-the-status-of-mysql-active-or-inactive","title":"Step-3: Check the Status of MySql (Active or Inactive)","text":"<pre><code>sudo systemctl status mysql\n</code></pre>"},{"location":"mysql/#step-4-login-to-mysql-as-a-root","title":"Step-4: Login to MySql as a root","text":"<pre><code>sudo mysql\n</code></pre>"},{"location":"mysql/#step-5-update-the-password-for-the-mysql-server","title":"Step-5: Update the password for the MySql Server","text":"<pre><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'place-your-password-here';\n</code></pre>"},{"location":"mysql/#step-6-test-the-mysql-server-if-it-is-working-by-running-sample-sql-queries","title":"Step-6: Test the MySql server if it is working by running sample sql queries","text":"<pre><code>CREATE DATABASE ashokit;\n\nUSE ashokit;\n\nCREATE TABLE emp (id INT, name VARCHAR(45));\n\nINSERT INTO emp VALUES(1, 'Virat'), (2, 'Sachin'), (3, 'Dhoni'), (4, 'ABD');\n\nSELECT * FROM emp;\n</code></pre>"},{"location":"nexus/","title":"Nexus","text":""},{"location":"nexus/#step-1-setup-linux-vm-amazon-linux-ami","title":"Step-1 : Setup Linux VM (Amazon Linux AMI)","text":"<ol> <li>Login into AWS Cloud account</li> <li>Launch Linux VM using EC2 service</li> <li>AMI : Amazon Linux</li> <li>Instance Type : t2.medium</li> <li>Connect to VM using MobaXterm</li> </ol>"},{"location":"nexus/#step-2-install-docker-in-linux-vm","title":"Step-2 : Install Docker In Linux VM","text":"<pre><code>sudo yum update -y\nsudo yum install docker -y\nsudo service docker start\nsudo usermod -aG docker ec2-user\nexit\n</code></pre>"},{"location":"nexus/#step-3-press-r-to-restart-the-session-this-is-in-mobaxterm","title":"Step-3 : Press 'R' to restart the session (This is in MobaXterm)","text":""},{"location":"nexus/#step-4-verify-docker-installation","title":"Step-4 : Verify docker installation","text":"<pre><code>docker -v\n</code></pre>"},{"location":"nexus/#step-5-run-nexus-using-docker-image","title":"Step-5 : Run Nexus using docker image","text":"<pre><code>docker run -d -p 8081:8081 --name nexus sonatype/nexus3\n</code></pre>"},{"location":"nexus/#step-6-enable-8081-port-number-in-security-group-inbound-rules-access-nexus-server","title":"Step-6: Enable 8081 port number in Security Group Inbound Rules &amp; Access Nexus Server","text":"<pre><code> http://public-ip:8081/\n</code></pre>"},{"location":"nexus/#step-7-get-nexus-passsword-from-docker-container","title":"Step-7: Get nexus passsword from Docker Container","text":"<pre><code> docker ps\n docker exec -it &lt;container-id&gt; /bin/bash\n cat /nexus-data/admin.password\n</code></pre>"},{"location":"nexus/#step-8-login-into-nexus-server","title":"Step-8: Login into Nexus Server","text":""},{"location":"python/","title":"Python for DevOps: From Basics to Advanced","text":""},{"location":"python/#1-introduction-to-python-for-devops","title":"1. Introduction to Python for DevOps","text":"<p>Python is a versatile programming language widely used in DevOps for automation, configuration management, and orchestration. Its simplicity and extensive libraries make it ideal for DevOps tasks.</p>"},{"location":"python/#2-setting-up-python","title":"2. Setting Up Python","text":""},{"location":"python/#installing-python","title":"Installing Python","text":"<ul> <li>Download and install Python from python.org.</li> <li>Verify installation:   <code>bash   python --version</code></li> </ul>"},{"location":"python/#setting-up-a-virtual-environment","title":"Setting Up a Virtual Environment","text":"<ul> <li>Create a virtual environment:   <code>bash   python -m venv env</code></li> <li>Activate the environment:</li> <li>Linux/macOS: <code>source env/bin/activate</code></li> <li>Windows: <code>env\\Scripts\\activate</code></li> </ul>"},{"location":"python/#3-python-basics","title":"3. Python Basics","text":""},{"location":"python/#variables-and-data-types","title":"Variables and Data Types","text":"<pre><code>name = \"DevOps\"\nage = 25\nis_active = True\nprint(f\"Name: {name}, Age: {age}, Active: {is_active}\")\n</code></pre>"},{"location":"python/#control-structures","title":"Control Structures","text":"<pre><code>for i in range(5):\n    print(f\"Iteration {i}\")\n\nif age &gt; 18:\n    print(\"Adult\")\nelse:\n    print(\"Minor\")\n</code></pre>"},{"location":"python/#functions","title":"Functions","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"DevOps Engineer\"))\n</code></pre>"},{"location":"python/#4-working-with-files","title":"4. Working with Files","text":""},{"location":"python/#reading-and-writing-files","title":"Reading and Writing Files","text":"<pre><code># Writing to a file\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, DevOps!\")\n\n# Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre>"},{"location":"python/#real-time-example-log-rotation","title":"Real-Time Example: Log Rotation","text":"<pre><code>import os\nimport shutil\n\ndef rotate_logs(log_dir, backup_dir):\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    for log_file in os.listdir(log_dir):\n        shutil.move(os.path.join(log_dir, log_file), backup_dir)\n\nrotate_logs(\"/var/logs\", \"/var/logs_backup\")\n</code></pre>"},{"location":"python/#5-networking-with-python","title":"5. Networking with Python","text":""},{"location":"python/#using-socket-for-networking","title":"Using <code>socket</code> for Networking","text":"<pre><code>import socket\n\nhostname = socket.gethostname()\nip_address = socket.gethostbyname(hostname)\nprint(f\"Hostname: {hostname}, IP Address: {ip_address}\")\n</code></pre>"},{"location":"python/#real-time-example-port-scanner","title":"Real-Time Example: Port Scanner","text":"<pre><code>import socket\n\ndef scan_ports(host, ports):\n    for port in ports:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            result = s.connect_ex((host, port))\n            if result == 0:\n                print(f\"Port {port} is open\")\n            else:\n                print(f\"Port {port} is closed\")\n\nscan_ports(\"127.0.0.1\", [22, 80, 443])\n</code></pre>"},{"location":"python/#6-automating-tasks","title":"6. Automating Tasks","text":""},{"location":"python/#automating-with-subprocess","title":"Automating with <code>subprocess</code>","text":"<pre><code>import subprocess\n\ndef run_command(command):\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    print(result.stdout)\n\nrun_command(\"ls -l\")\n</code></pre>"},{"location":"python/#real-time-example-automating-backups","title":"Real-Time Example: Automating Backups","text":"<pre><code>import os\nimport shutil\n\ndef backup_files(source_dir, backup_dir):\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    shutil.copytree(source_dir, backup_dir, dirs_exist_ok=True)\n\nbackup_files(\"/data\", \"/backup/data\")\n</code></pre>"},{"location":"python/#7-working-with-apis","title":"7. Working with APIs","text":""},{"location":"python/#using-requests-library","title":"Using <code>requests</code> Library","text":"<pre><code>import requests\n\nresponse = requests.get(\"https://api.github.com\")\nprint(response.json())\n</code></pre>"},{"location":"python/#real-time-example-fetching-weather-data","title":"Real-Time Example: Fetching Weather Data","text":"<pre><code>import requests\n\ndef get_weather(city):\n    api_key = \"your_api_key\"\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&amp;appid={api_key}\"\n    response = requests.get(url)\n    data = response.json()\n    print(f\"Weather in {city}: {data['weather'][0]['description']}\")\n\nget_weather(\"London\")\n</code></pre>"},{"location":"python/#8-infrastructure-as-code-iac","title":"8. Infrastructure as Code (IaC)","text":""},{"location":"python/#using-python-with-terraform","title":"Using Python with Terraform","text":"<pre><code>import os\n\ndef apply_terraform():\n    os.system(\"terraform init &amp;&amp; terraform apply -auto-approve\")\n\napply_terraform()\n</code></pre>"},{"location":"python/#real-time-example-managing-aws-resources","title":"Real-Time Example: Managing AWS Resources","text":"<pre><code>import boto3\n\nec2 = boto3.client(\"ec2\")\ninstances = ec2.describe_instances()\nfor reservation in instances[\"Reservations\"]:\n    for instance in reservation[\"Instances\"]:\n        print(f\"Instance ID: {instance['InstanceId']}, State: {instance['State']['Name']}\")\n</code></pre>"},{"location":"python/#9-monitoring-and-logging","title":"9. Monitoring and Logging","text":""},{"location":"python/#monitoring-system-metrics","title":"Monitoring System Metrics","text":"<pre><code>import psutil\n\ncpu = psutil.cpu_percent(interval=1)\nmemory = psutil.virtual_memory()\nprint(f\"CPU Usage: {cpu}%, Memory Usage: {memory.percent}%\")\n</code></pre>"},{"location":"python/#real-time-example-log-monitoring","title":"Real-Time Example: Log Monitoring","text":"<pre><code>import time\n\ndef monitor_logs(log_file):\n    with open(log_file, \"r\") as file:\n        file.seek(0, 2)  # Move to the end of the file\n        while True:\n            line = file.readline()\n            if line:\n                print(line.strip())\n            time.sleep(1)\n\nmonitor_logs(\"/var/log/syslog\")\n</code></pre>"},{"location":"python/#10-advanced-topics","title":"10. Advanced Topics","text":""},{"location":"python/#multithreading","title":"Multithreading","text":"<pre><code>import threading\n\ndef print_numbers():\n    for i in range(5):\n        print(i)\n\nthread = threading.Thread(target=print_numbers)\nthread.start()\nthread.join()\n</code></pre>"},{"location":"python/#real-time-example-parallel-file-processing","title":"Real-Time Example: Parallel File Processing","text":"<pre><code>import threading\n\ndef process_file(file):\n    print(f\"Processing {file}\")\n\nfiles = [\"file1.txt\", \"file2.txt\", \"file3.txt\"]\nthreads = [threading.Thread(target=process_file, args=(file,)) for file in files]\n\nfor thread in threads:\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n</code></pre>"},{"location":"python/#11-best-practices","title":"11. Best Practices","text":"<ul> <li>Use Virtual Environments: Isolate dependencies for each project.</li> <li>Write Modular Code: Break scripts into reusable functions.</li> <li>Handle Exceptions: Use <code>try-except</code> blocks to handle errors.</li> <li>Use Logging: Replace <code>print</code> statements with the <code>logging</code> module.</li> <li>Follow PEP 8: Adhere to Python's style guide.</li> </ul>"},{"location":"python/#12-resources-and-further-reading","title":"12. Resources and Further Reading","text":"<ul> <li>Python Official Documentation</li> <li>Real Python</li> <li>Automate the Boring Stuff with Python</li> <li>Python for DevOps Book</li> </ul>"},{"location":"sonarqube/","title":"Sonarqube","text":""},{"location":"sonarqube/#step-1-setup-linux-vm-amazon-linux-ami","title":"Step-1 : Setup Linux VM (Amazon Linux AMI)","text":"<ol> <li>Login into AWS Cloud account</li> <li>Launch Linux VM using EC2 service</li> <li>AMI : Amazon Linux</li> <li>Instance Type : t2.medium</li> <li>Connect to VM using MobaXterm</li> </ol>"},{"location":"sonarqube/#step-2-install-docker-in-linux-vm","title":"Step-2 : Install Docker In Linux VM","text":"<pre><code>sudo yum update -y\nsudo yum install docker -y\nsudo service docker start\nsudo usermod -aG docker ec2-user\nexit\n</code></pre>"},{"location":"sonarqube/#step-3-press-r-to-restart-the-session-this-is-in-mobaxterm","title":"Step-3 : Press 'R' to restart the session (This is in MobaXterm)","text":""},{"location":"sonarqube/#step-4-verify-docker-installation","title":"Step-4 : Verify docker installation","text":"<pre><code>docker -v\n</code></pre>"},{"location":"sonarqube/#step-5-run-sonarqube-using-docker-image","title":"Step-5 : Run SonarQube using docker image","text":"<pre><code>docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:lts-community\n</code></pre>"},{"location":"sonarqube/#step-6-enable-9000-port-number-in-security-group-inbound-rules-access-sonar-server","title":"Step-6: Enable 9000 port number in Security Group Inbound Rules &amp; Access Sonar Server","text":"<pre><code> - URL : http://public-ip:9000/\n</code></pre>"},{"location":"terraform/","title":"Setting Up Terraform","text":"<p>Terraform is an open-source infrastructure as code (IaC) tool that allows you to define and provision infrastructure using a declarative configuration language.</p>"},{"location":"terraform/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install Terraform:</p> </li> <li> <p>Download Terraform from the official website.</p> </li> <li> <p>Follow the installation instructions for your operating system.</p> </li> <li> <p>Verify Installation:</p> </li> </ol> <p><code>bash    terraform --version</code></p> <ol> <li>Install a Cloud Provider CLI (e.g., AWS CLI, Azure CLI, or Google Cloud SDK) if you plan to manage cloud resources.</li> </ol>"},{"location":"terraform/#steps-to-set-up-terraform","title":"Steps to Set Up Terraform","text":""},{"location":"terraform/#1-create-a-working-directory","title":"1. Create a Working Directory","text":"<p>Create a directory for your Terraform configuration files:</p> <pre><code>mkdir terraform-setup\ncd terraform-setup\n</code></pre>"},{"location":"terraform/#2-write-a-configuration-file","title":"2. Write a Configuration File","text":"<p>Create a file named <code>main.tf</code>:</p> <pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-unique-bucket-name\"\n  acl    = \"private\"\n}\n</code></pre>"},{"location":"terraform/#3-initialize-terraform","title":"3. Initialize Terraform","text":"<p>Run the following command to initialize the working directory:</p> <pre><code>terraform init\n</code></pre>"},{"location":"terraform/#4-format-and-validate-configuration","title":"4. Format and Validate Configuration","text":"<ul> <li>Format the configuration:   <code>bash   terraform fmt</code></li> <li>Validate the configuration:   <code>bash   terraform validate</code></li> </ul>"},{"location":"terraform/#5-plan-the-infrastructure","title":"5. Plan the Infrastructure","text":"<p>Generate an execution plan:</p> <pre><code>terraform plan\n</code></pre>"},{"location":"terraform/#6-apply-the-configuration","title":"6. Apply the Configuration","text":"<p>Apply the changes to create the resources:</p> <pre><code>terraform apply\n</code></pre>"},{"location":"terraform/#7-destroy-the-infrastructure","title":"7. Destroy the Infrastructure","text":"<p>To clean up resources, run:</p> <pre><code>terraform destroy\n</code></pre>"},{"location":"terraform/#additional-resources","title":"Additional Resources","text":"<ul> <li>Terraform Documentation</li> <li>Terraform Registry</li> </ul>"},{"location":"terraform1/","title":"\ud83c\udf0d Installing Terraform","text":""},{"location":"terraform1/#1-download-terraform","title":"1. \ud83d\udd3d Download Terraform","text":""},{"location":"terraform1/#for-macos","title":"For macOS","text":"<ol> <li>Open your terminal.</li> <li>Use Homebrew to download Terraform:</li> </ol> <p><code>bash    brew tap hashicorp/tap    brew install hashicorp/tap/terraform</code></p>"},{"location":"terraform1/#for-windows","title":"For Windows","text":"<ol> <li>Download the Windows 64-bit zip archive from the Terraform website.</li> <li>Extract the <code>terraform.exe</code> file and place it in a directory included in your system's <code>PATH</code>.</li> </ol>"},{"location":"terraform1/#for-linux","title":"For Linux","text":"<ol> <li>Download the appropriate package from the Terraform website.</li> <li>Use the following commands to extract and move the Terraform binary:</li> </ol> <p><code>bash    wget https://releases.hashicorp.com/terraform/&lt;VERSION&gt;/terraform_&lt;VERSION&gt;_linux_amd64.zip    unzip terraform_&lt;VERSION&gt;_linux_amd64.zip    sudo mv terraform /usr/local/bin/</code></p>"},{"location":"terraform1/#2-verify-the-installation","title":"2. \ud83c\udfc3 Verify the Installation","text":"<ol> <li>Open your terminal or command prompt.</li> <li>Run the following command to verify that Terraform is installed correctly:</li> </ol> <p><code>bash    terraform -version</code></p> <p>You should see output displaying the installed version of Terraform.</p>"},{"location":"terraform1/#3-set-up-your-working-directory","title":"3. \ud83d\udda5\ufe0f Set Up Your Working Directory","text":"<ol> <li>Create a directory for your Terraform configurations:</li> </ol> <p><code>bash    mkdir terraform-projects    cd terraform-projects</code></p> <ol> <li>Inside this directory, create a subdirectory for each project or environment you plan to manage with Terraform.</li> </ol>"},{"location":"terraform1/#4-configure-environment-variables","title":"4. \u2699\ufe0f Configure Environment Variables","text":"<ol> <li>Export any necessary environment variables for your cloud provider. For example, for AWS:</li> </ol> <p><code>bash    export AWS_ACCESS_KEY_ID=\"your-access-key-id\"    export AWS_SECRET_ACCESS_KEY=\"your-secret-access-key\"</code></p> <ol> <li>You can add these lines to your <code>.bashrc</code> or <code>.zshrc</code> file to make them persistent across sessions.</li> </ol>"},{"location":"terraform1/#5-create-a-terraform-configuration","title":"5. \ud83d\udce6 Create a Terraform Configuration","text":"<ol> <li> <p>Create a new file with a <code>.tf</code> extension, for example, <code>main.tf</code>.</p> </li> <li> <p>Add a basic configuration to the file, such as:</p> </li> </ol> <p>```hcl    provider \"aws\" {      region = \"us-west-2\"    }</p> <p>resource \"aws_instance\" \"example\" {      ami           = \"ami-0c55b159cbfafe1f0\"      instance_type = \"t2.micro\"    }    ```</p>"},{"location":"terraform1/#6-initialize-terraform","title":"6. \ud83d\udd04 Initialize Terraform","text":"<ol> <li>Run the following command to initialize your configuration. This will download the necessary provider plugins:</li> </ol> <p><code>bash    terraform init</code></p>"},{"location":"terraform1/#7-plan-and-apply-your-configuration","title":"7. \ud83d\udcdd Plan and Apply Your Configuration","text":"<ol> <li>Run <code>terraform plan</code> to see what changes Terraform will make:</li> </ol> <p><code>bash    terraform plan</code></p> <ol> <li>If everything looks good, apply the configuration:</li> </ol> <p><code>bash    terraform apply</code></p> <ol> <li>Confirm the apply action by typing <code>yes</code> when prompted.</li> </ol>"},{"location":"terraform1/#8-managing-terraform-state","title":"8. \ud83d\udee0\ufe0f Managing Terraform State","text":"<ol> <li>By default, Terraform stores the state file locally. Consider configuring a remote backend for production use. Here's an example for AWS S3:</li> </ol> <p><code>hcl    terraform {      backend \"s3\" {        bucket         = \"my-terraform-state\"        key            = \"path/to/my/key\"        region         = \"us-west-2\"        dynamodb_table = \"terraform-lock\"      }    }</code></p> <ol> <li>Initialize Terraform again to set up the remote backend:</li> </ol> <p><code>bash    terraform init</code></p>"},{"location":"terraform1/#9-updating-terraform","title":"9. \ud83d\udd27 Updating Terraform","text":"<ol> <li>To update Terraform to the latest version, use the following command for Homebrew (macOS):</li> </ol> <p><code>bash    brew upgrade hashicorp/tap/terraform</code></p> <ol> <li>For other systems, download and replace the binary following the same steps as the initial installation.</li> </ol>"},{"location":"terraform1/#10-additional-resources","title":"10. \ud83d\udcda Additional Resources","text":"<ul> <li>\ud83d\udcd6 Official Terraform Documentation</li> <li>\ud83c\udf93 HashiCorp Learn</li> </ul> <p>That's it! You're now ready to start using Terraform to manage your infrastructure. \ud83d\ude80</p>"},{"location":"yaml/","title":"YAML for DevOps: From Basics to Advanced","text":""},{"location":"yaml/#1-introduction-to-yaml","title":"1. Introduction to YAML","text":"<p>YAML (YAML Ain't Markup Language) is a human-readable data serialization format commonly used in DevOps for configuration files, CI/CD pipelines, and infrastructure as code (IaC). Its simplicity and readability make it ideal for managing complex configurations.</p>"},{"location":"yaml/#2-yaml-basics","title":"2. YAML Basics","text":""},{"location":"yaml/#key-value-pairs","title":"Key-Value Pairs","text":"<pre><code>name: DevOps\nage: 25\nis_active: true\n</code></pre>"},{"location":"yaml/#lists","title":"Lists","text":"<pre><code>tools:\n  - Docker\n  - Kubernetes\n  - Terraform\n</code></pre>"},{"location":"yaml/#nested-structures","title":"Nested Structures","text":"<pre><code>person:\n  name: John\n  details:\n    age: 30\n    role: DevOps Engineer\n</code></pre>"},{"location":"yaml/#3-yaml-syntax-and-rules","title":"3. YAML Syntax and Rules","text":""},{"location":"yaml/#indentation","title":"Indentation","text":"<ul> <li>Use spaces, not tabs.</li> <li>Indentation defines structure.</li> </ul>"},{"location":"yaml/#comments","title":"Comments","text":"<pre><code># This is a comment\nname: DevOps\n</code></pre>"},{"location":"yaml/#scalars","title":"Scalars","text":"<ul> <li>Strings, numbers, booleans, and null values.</li> </ul> <pre><code>string: 'Hello'\nnumber: 42\nboolean: true\nnull_value: null\n</code></pre>"},{"location":"yaml/#multi-line-strings","title":"Multi-Line Strings","text":"<pre><code>description: |\n  This is a multi-line\n  string in YAML.\n</code></pre>"},{"location":"yaml/#anchors-and-aliases","title":"Anchors and Aliases","text":"<pre><code>default: &amp;default_settings\n  retries: 3\n  timeout: 30\n\ncustom:\n  &lt;&lt;: *default_settings\n  timeout: 60\n</code></pre>"},{"location":"yaml/#4-working-with-yaml-in-devops","title":"4. Working with YAML in DevOps","text":""},{"location":"yaml/#yaml-for-docker-compose","title":"YAML for Docker Compose","text":"<pre><code>version: '3.8'\nservices:\n  web:\n    image: nginx\n    ports:\n      - '80:80'\n  db:\n    image: postgres\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: password\n</code></pre>"},{"location":"yaml/#yaml-for-ansible-playbooks","title":"YAML for Ansible Playbooks","text":"<pre><code>- name: Install and start Apache\n  hosts: webservers\n  tasks:\n    - name: Install Apache\n      apt:\n        name: apache2\n        state: present\n    - name: Start Apache\n      service:\n        name: apache2\n        state: started\n</code></pre>"},{"location":"yaml/#5-yaml-in-cicd-pipelines","title":"5. YAML in CI/CD Pipelines","text":""},{"location":"yaml/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code>name: CI Pipeline\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Run tests\n        run: pytest\n</code></pre>"},{"location":"yaml/#gitlab-cicd","title":"GitLab CI/CD","text":"<pre><code>stages:\n  - build\n  - test\n\nbuild-job:\n  stage: build\n  script:\n    - echo \"Building the application\"\n\ntest-job:\n  stage: test\n  script:\n    - echo \"Running tests\"\n</code></pre>"},{"location":"yaml/#6-yaml-for-kubernetes","title":"6. YAML for Kubernetes","text":""},{"location":"yaml/#kubernetes-pod-definition","title":"Kubernetes Pod Definition","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\n  labels:\n    app: my-app\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx\n      ports:\n        - containerPort: 80\n</code></pre>"},{"location":"yaml/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.21\n          ports:\n            - containerPort: 80\n</code></pre>"},{"location":"yaml/#7-yaml-for-configuration-management","title":"7. YAML for Configuration Management","text":""},{"location":"yaml/#terraform-yaml-configuration","title":"Terraform YAML Configuration","text":"<pre><code>provider:\n  name: aws\n  region: us-east-1\n\nresource:\n  aws_instance:\n    my_instance:\n      ami: ami-12345678\n      instance_type: t2.micro\n</code></pre>"},{"location":"yaml/#helm-chart-values","title":"Helm Chart Values","text":"<pre><code>replicaCount: 3\nimage:\n  repository: nginx\n  tag: '1.21'\n  pullPolicy: IfNotPresent\nservice:\n  type: ClusterIP\n  port: 80\n</code></pre>"},{"location":"yaml/#8-advanced-yaml-features","title":"8. Advanced YAML Features","text":""},{"location":"yaml/#using-environment-variables","title":"Using Environment Variables","text":"<pre><code>environment:\n  - name: DATABASE_URL\n    value: ${DATABASE_URL}\n</code></pre>"},{"location":"yaml/#conditional-logic-eg-in-cicd","title":"Conditional Logic (e.g., in CI/CD)","text":"<pre><code>jobs:\n  deploy:\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to production\n        run: ./deploy.sh\n</code></pre>"},{"location":"yaml/#yaml-validation","title":"YAML Validation","text":"<ul> <li>Use tools like <code>yamllint</code> or <code>pyyaml</code> to validate YAML files.</li> </ul>"},{"location":"yaml/#9-best-practices","title":"9. Best Practices","text":"<ul> <li>Use Consistent Indentation: Stick to 2 or 4 spaces.</li> <li>Add Comments: Explain complex configurations.</li> <li>Validate YAML: Use linters to catch syntax errors.</li> <li>Avoid Hardcoding: Use environment variables where possible.</li> <li>Keep It Simple: Avoid deeply nested structures.</li> </ul>"},{"location":"yaml/#10-resources-and-further-reading","title":"10. Resources and Further Reading","text":"<ul> <li>YAML Official Documentation</li> <li>Learn YAML in 5 Minutes</li> <li>YAML Linter</li> <li>Kubernetes YAML Basics</li> </ul>"}]}